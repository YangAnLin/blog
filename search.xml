<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/2020/08/06/2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213153940.jpeg" alt=""><br>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。<br>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Strategy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyInterface</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteStrategyA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteStrategyA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteStrategyB</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteStrategyB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteStrategyC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyC</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteStrategyC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Context</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有一个具体策略的对象</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，传入一个具体策略对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInterface</span><span class="params">()</span></span>&#123;</span><br><span class="line">        strategy.strategyInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line">        context.contextInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>MemberStrategy.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会员策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算图书的价格,根绝会员等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> booksPrice    图书的原价</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    计算出打折后的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>PrimaryMemberStrategy.java 初级会员</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初级会员,没有折扣"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IntermediateMemberStrategy.java 中级会员</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntermediateMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对于中级会员的折扣为10%"</span>);</span><br><span class="line">        <span class="keyword">return</span> booksPrice * <span class="number">0.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AdvancedMemberStrategy.java 高级会员</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对于高级会员的折扣为20%"</span>);</span><br><span class="line">        <span class="keyword">return</span> booksPrice * <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Price.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MemberStrategy strategy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Price</span><span class="params">(MemberStrategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算图书的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> booksPrice    图书的原价</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    计算出打折后的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">quote</span><span class="params">(<span class="keyword">double</span> booksPrice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calcPrice(booksPrice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//选择并创建需要使用的策略对象</span></span><br><span class="line">        MemberStrategy strategy = <span class="keyword">new</span> AdvancedMemberStrategy();</span><br><span class="line">        <span class="comment">//创建环境</span></span><br><span class="line">        Price price = <span class="keyword">new</span> Price(strategy);</span><br><span class="line">        <span class="comment">//计算价格</span></span><br><span class="line">        <span class="keyword">double</span> quote = price.quote(<span class="number">300</span>);</span><br><span class="line">        System.out.println(<span class="string">"图书的最终价格为："</span> + quote);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK和CGLib动态代理</title>
    <url>/2017/06/15/11.JDK%E5%92%8CCGLib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h3 id="一-JDK动态代理"><a href="#一-JDK动态代理" class="headerlink" title="一:JDK动态代理"></a>一:JDK动态代理</h3><h4 id="1-创建接口"><a href="#1-创建接口" class="headerlink" title="1.创建接口"></a>1.创建接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-创建接口实现类"><a href="#2-创建接口实现类" class="headerlink" title="2.创建接口实现类"></a>2.创建接口实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I want to rent my house"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello: "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-创建动态代理类"><a href="#3-创建动态代理类" class="headerlink" title="3.创建动态代理类"></a>3.创建动态代理类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object subject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法，给我们要代理的真实对象赋初值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现接口的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object object, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//在代理真实对象前我们可以添加一些自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">"before rent house"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Method:"</span> + method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></span><br><span class="line">        method.invoke(subject, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在代理真实对象后我们也可以添加一些自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">"after rent house"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="4-创建客户端"><a href="#4-创建客户端" class="headerlink" title="4.创建客户端"></a>4.创建客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我们要代理的真实对象</span></span><br><span class="line">        Subject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> DynamicProxy(realSubject);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span></span><br><span class="line"><span class="comment">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span></span><br><span class="line"><span class="comment">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span></span><br><span class="line"><span class="comment">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject .getClass().getInterfaces(), handler);</span><br><span class="line"></span><br><span class="line">        System.out.println(subject.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用第一个方法</span></span><br><span class="line">        subject.rent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用第二个方法</span></span><br><span class="line">        subject.hello(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理接口"><a href="#代理接口" class="headerlink" title="代理接口"></a>代理接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">say</span><span class="params">(String aa)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"接口方法调用开始"</span>);  </span><br><span class="line">        <span class="comment">//执行方法  </span></span><br><span class="line">        System.out.println(<span class="string">"method toGenericString:"</span>+method.toGenericString());</span><br><span class="line">        System.out.println(<span class="string">"method name:"</span>+method.getName());</span><br><span class="line">        System.out.println(<span class="string">"method args:"</span>+(String)args[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">"接口方法调用结束"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"调用返回值"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newMapperProxy</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> </span>&#123;</span><br><span class="line">        ClassLoader classLoader = mapperInterface.getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = <span class="keyword">new</span> Class[]&#123;mapperInterface&#125;;</span><br><span class="line">        FacadeProxy proxy = <span class="keyword">new</span> FacadeProxy();</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(classLoader, interfaces, proxy);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		IHello hello = FacadeProxy.newMapperProxy(IHello<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		System.out.println(hello.say(<span class="string">"hello world"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二-CLIiB动态代理"><a href="#二-CLIiB动态代理" class="headerlink" title="二:CLIiB动态代理"></a>二:CLIiB动态代理</h3><p>JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要CGLib了。CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。</p>
<h4 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1.创建对象"></a>1.创建对象</h4><p>这是一个需要被代理的类，也就是父类，通过字节码技术创建这个类的子类，实现动态代理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello everyone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-创建动态代理类"><a href="#2-创建动态代理类" class="headerlink" title="2.创建动态代理类"></a>2.创建动态代理类</h4><p>该类实现了创建子类的方法与代理的方法。getProxy(SuperClass.class)方法通过入参即父类的字节码，通过扩展父类的class来创建代理对象。intercept()方法拦截所有目标类方法的调用，obj表示目标类的实例，method为目标类方法的反射对象，args为方法的动态入参，proxy为代理类实例。proxy.invokeSuper(obj, args)通过代理类调用父类中的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置需要创建子类的类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//通过字节码技术动态创建子类实例</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现MethodInterceptor接口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"前置代理"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理类调用父类中的方法</span></span><br><span class="line">        Object result = proxy.invokeSuper(obj, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"后置代理"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-客户端"><a href="#3-客户端" class="headerlink" title="3.客户端"></a>3.客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoCGLib</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CglibProxy proxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">        <span class="comment">//通过生成子类的方式创建代理类</span></span><br><span class="line">        SayHello proxyImp = (SayHello)proxy.getProxy(SayHello<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        proxyImp.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三-对比"><a href="#三-对比" class="headerlink" title="三:对比"></a>三:对比</h3><p>CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</p>
]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2017/06/15/13.%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><p>1 线程：进程中负责程序执行的执行单元<br>线程本身依靠程序进行运行<br>线程是程序中的顺序控制流，只能使用分配给程序的资源和环境</p>
<p>2 进程：执行中的程序<br>一个进程至少包含一个线程</p>
<p>3 单线程：程序中只存在一个线程，实际上主方法就是一个主线程</p>
<p>4 多线程：在一个程序中运行多个任务<br>目的是更好地使用CPU资源</p>
<h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID:"</span>+Thread.currentThread().getId());</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(<span class="string">"thread1"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(<span class="string">"thread2"</span>);</span><br><span class="line">        thread2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span>+name+<span class="string">" 子线程ID:"</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">        MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><h4 id="1-currentThread"><a href="#1-currentThread" class="headerlink" title="1.currentThread()"></a>1.currentThread()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">        System.out.println(<span class="string">"主线程名字："</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-sleep"><a href="#2-sleep" class="headerlink" title="2.sleep()"></a>2.sleep()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test2 test = <span class="keyword">new</span> Test2();</span><br><span class="line">        MyThread thread1 = test.<span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread thread2 = test.<span class="keyword">new</span> MyThread();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"===&gt; i:"</span>+i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"进入睡眠状态"</span>);</span><br><span class="line">                    Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"睡眠结束"</span>);</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread-<span class="number">0</span>===&gt; i:<span class="number">11</span></span><br><span class="line">线程Thread-<span class="number">0</span>进入睡眠状态</span><br><span class="line"><span class="comment">//这里会等待3000毫秒</span></span><br><span class="line">线程Thread-<span class="number">0</span>睡眠结束</span><br><span class="line">i:<span class="number">12</span></span><br><span class="line">  </span><br><span class="line">Thread-<span class="number">1</span>===&gt; i:<span class="number">13</span></span><br><span class="line">线程Thread-<span class="number">1</span>进入睡眠状态</span><br><span class="line"><span class="comment">//这里会等待3000毫秒</span></span><br><span class="line">线程Thread-<span class="number">1</span>睡眠结束</span><br><span class="line">i:<span class="number">14</span></span><br></pre></td></tr></table></figure>



<h4 id="3-yield"><a href="#3-yield" class="headerlink" title="3.yield"></a>3.yield</h4><ul>
<li>调用yield方法会让当前线程交出CPU权限，让CPU去执行其他的线程</li>
<li>但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让拥有相同优先级的线程有获取CPU执行时间的机会。</li>
<li>注意，调用yield方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>  <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000000</span>;i++)&#123;</span><br><span class="line">            count=count+(i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//Thread.yield();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"用时："</span>+(endTime-beginTime)+<span class="string">" 毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t= <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;用时:23毫秒!</span><br><span class="line">取消注释&#x3D;&#x3D;&gt;用时：4890 毫秒！</span><br></pre></td></tr></table></figure>



<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h4><p>start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。</p>
<h4 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h4><p>run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意，继承Thread类必须重写run方法，在run方法中定义具体要执行的任务。</p>
<h4 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        System.out.println(thread.getName());</span><br><span class="line">        System.out.println(thread.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h4><p>方法isAlive()的作用是测试线程是否偶处于活动状态。什么是活动状态呢？活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(<span class="string">"_2"</span>);</span><br><span class="line">        System.out.println(thread2.isAlive());</span><br><span class="line">        thread2.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(thread2.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>在很多情况下，主线程创建并启动了线程，如果子线程中药进行大量耗时运算，主线程往往将早于子线程结束之前结束。这时，如果主线程想等待子线程执行完成之后再结束，比如子线程处理一个数据，主线程要取得这个数据中的值，就要用到join()方法了。方法join()的作用是等待线程对象销毁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread4</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">"  "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 启动子进程</span></span><br><span class="line">        <span class="keyword">new</span> Thread4(<span class="string">"new thread"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                Thread4 th = <span class="keyword">new</span> Thread4(<span class="string">"joined thread"</span>);</span><br><span class="line">                th.start();</span><br><span class="line">                th.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"  "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">有join方法:</span><br><span class="line">main  <span class="number">0</span></span><br><span class="line">main  <span class="number">1</span></span><br><span class="line">main  <span class="number">2</span></span><br><span class="line">main  <span class="number">3</span></span><br><span class="line">main  <span class="number">4</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">2</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">3</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">4</span></span><br><span class="line">joined thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">1</span></span><br><span class="line">joined thread  <span class="number">2</span></span><br><span class="line">joined thread  <span class="number">3</span></span><br><span class="line">joined thread  <span class="number">4</span></span><br><span class="line">main  <span class="number">5</span></span><br><span class="line">main  <span class="number">6</span></span><br><span class="line">main  <span class="number">7</span></span><br><span class="line">main  <span class="number">8</span></span><br><span class="line">main  <span class="number">9</span></span><br><span class="line"></span><br><span class="line">没有join方法:</span><br><span class="line">main  <span class="number">0</span></span><br><span class="line">main  <span class="number">1</span></span><br><span class="line">main  <span class="number">2</span></span><br><span class="line">main  <span class="number">3</span></span><br><span class="line">main  <span class="number">4</span></span><br><span class="line">main  <span class="number">5</span></span><br><span class="line">main  <span class="number">6</span></span><br><span class="line">main  <span class="number">7</span></span><br><span class="line">main  <span class="number">8</span></span><br><span class="line">main  <span class="number">9</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">1</span></span><br><span class="line">joined thread  <span class="number">2</span></span><br><span class="line">joined thread  <span class="number">3</span></span><br><span class="line">joined thread  <span class="number">4</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">2</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">3</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="getName和setName"><a href="#getName和setName" class="headerlink" title="getName和setName()"></a>getName和setName()</h4><p>用来得到或者设置线程名称。</p>
<h4 id="getPriority和setPriority"><a href="#getPriority和setPriority" class="headerlink" title="getPriority和setPriority()"></a>getPriority和setPriority()</h4><p>用来获取和设置线程优先级。</p>
<h4 id="setDaemon和isDaemon"><a href="#setDaemon和isDaemon" class="headerlink" title="setDaemon和isDaemon()"></a>setDaemon和isDaemon()</h4><p>用来设置线程是否成为守护线程和判断线程是否是守护线程。</p>
<h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><p>停止线程是在多线程开发时很重要的技术点，掌握此技术可以对线程的停止进行有效的处理。</p>
<p>停止一个线程可以使用Thread.stop()方法，但最好不用它。该方法是不安全的，已被弃用。<br>在Java中有以下3种方法可以终止正在运行的线程：</p>
<ul>
<li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li>
<li>使用stop方法强行终止线程，但是不推荐使用这个方法，因为stop和suspend及resume一样，都是作废过期的方法，使用他们可能产生不可预料的结果。</li>
<li>使用interrupt方法中断线程，但这个不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。</li>
</ul>
<h3 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h3><p>interrupt()方法</p>
<h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>JDK中使用3个常量来预置定义优先级的值，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>线程优先级特性：</p>
<ul>
<li>继承性<br>比如A线程启动B线程，则B线程的优先级与A是一样的。</li>
<li>规则性<br>高优先级的线程总是大部分先执行完，但不代表高优先级线程全部先执行完。</li>
<li>随机性<br>优先级较高的线程不一定每一次都先执行完。</li>
</ul>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>在Java线程中有两种线程，一种是User Thread（用户线程），另一种是Daemon Thread(守护线程)。<br>Daemon的作用是为其他线程的运行提供服务，比如说GC线程。其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以虚拟机也就退出了。</p>
<p>守护线程并非虚拟机内部可以提供，用户也可以自行的设定守护线程，方法：public final void setDaemon(boolean on) ；但是有几点需要注意：</p>
<ul>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。 （备注：这点与守护进程有着明显的区别，守护进程是创建后，让进程摆脱原会话的控制+让进程摆脱原进程组的控制+让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有着本质上面的区别）</li>
<li>在Daemon线程中产生的新线程也是Daemon的。 （这一点又是有着本质的区别了：守护进程fork()出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的进程的父进程不是init进程，所谓的守护进程本质上说就是“父进程挂掉，init收养，然后文件0,1,2都是/dev/null，当前目录到/”）</li>
<li>不是所有的应用都可以分配给Daemon线程来进行服务，比如读写操作或者计算逻辑。因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了。</li>
</ul>
<h3 id="同步与死锁"><a href="#同步与死锁" class="headerlink" title="同步与死锁"></a>同步与死锁</h3><ol>
<li>同步代码块<br>在代码块上加上”synchronized”关键字，则此代码块就称为同步代码块</li>
<li>同步代码块格式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步对象)&#123;</span><br><span class="line"> 需要同步的代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>同步方法<br> 除了代码块可以同步，方法也是可以同步的</p>
</li>
<li><p>方法同步格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> 方法名称()&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>设计模式-简单工厂</title>
    <url>/2020/08/06/1.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213153930.jpeg" alt=""><br>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<p>Pay.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">(Integer money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SimpleFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pay <span class="title">create</span><span class="params">(String payType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payType.equals(<span class="string">"ZFB"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ZFBPay();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payType.equals(<span class="string">"WX"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WXPay();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WXPay.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXPay</span> <span class="keyword">implements</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Integer money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"微信支付:"</span>+money+<span class="string">"元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ZFBPay.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZFBPay</span> <span class="keyword">implements</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Integer money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝支付:"</span>+money+<span class="string">"元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂设计模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pay wx = SimpleFactory.create(<span class="string">"WX"</span>);</span><br><span class="line">        wx.pay(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Pay zfb = SimpleFactory.create(<span class="string">"ZFB"</span>);</span><br><span class="line">        zfb.pay(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-责任链模式</title>
    <url>/2020/08/22/4.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>Tomcat的过滤器也使用到了责任链<code>ApplicationFilterChain</code>,具体的还没有读,先写完这个模式,比模板模式感觉有点复杂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name; <span class="comment">// 处理者姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">protected</span> Handler nextHandler;  <span class="comment">// 下一个处理者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(LeaveRequest leaveRequest)</span></span>; <span class="comment">// 处理请假</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(LeaveRequest leaveRequest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 随机数大于3则为批准，否则不批准</span></span><br><span class="line">        <span class="keyword">boolean</span> result = (<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>)) &gt; <span class="number">3</span>;</span><br><span class="line">        String log = <span class="string">"主管&lt;%s&gt; 审批 &lt;%s&gt; 的请假申请，请假天数： &lt;%d&gt; ，审批结果：&lt;%s&gt; "</span>;</span><br><span class="line">        System.out.println(String.format(log, <span class="keyword">this</span>.name, leaveRequest.getName(), leaveRequest.getNumOfDays(), result == <span class="keyword">true</span> ? <span class="string">"批准"</span> : <span class="string">"不批准"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result) &#123;  <span class="comment">// 不批准</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (leaveRequest.getNumOfDays() &lt; <span class="number">3</span>) &#123; <span class="comment">// 批准且天数小于3，返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextHandler.process(leaveRequest);   <span class="comment">// 批准且天数大于等于3，提交给下一个处理者处理</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(LeaveRequest leaveRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = (<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>)) &gt; <span class="number">3</span>; <span class="comment">// 随机数大于3则为批准，否则不批准</span></span><br><span class="line">        String log = <span class="string">"经理&lt;%s&gt; 审批 &lt;%s&gt; 的请假申请，请假天数： &lt;%d&gt; ，审批结果：&lt;%s&gt; "</span>;</span><br><span class="line">        System.out.println(String.format(log, <span class="keyword">this</span>.name, leaveRequest.getName(), leaveRequest.getNumOfDays(), result == <span class="keyword">true</span> ? <span class="string">"批准"</span> : <span class="string">"不批准"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result) &#123;  <span class="comment">// 不批准</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (leaveRequest.getNumOfDays() &lt; <span class="number">7</span>) &#123; <span class="comment">// 批准且天数小于7</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextHandler.process(leaveRequest);   <span class="comment">// 批准且天数大于等于7，提交给下一个处理者处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopManager</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(LeaveRequest leaveRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = (<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>)) &gt; <span class="number">3</span>; <span class="comment">// 随机数大于3则为批准，否则不批准</span></span><br><span class="line">        String log = <span class="string">"总经理&lt;%s&gt; 审批 &lt;%s&gt; 的请假申请，请假天数： &lt;%d&gt; ，审批结果：&lt;%s&gt; "</span>;</span><br><span class="line">        System.out.println(String.format(log, <span class="keyword">this</span>.name, leaveRequest.getName(), leaveRequest.getNumOfDays(), result == <span class="keyword">true</span> ? <span class="string">"批准"</span> : <span class="string">"不批准"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result) &#123; <span class="comment">// 总经理不批准</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    <span class="comment">// 总经理最后批准</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 请假人姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numOfDays;  <span class="comment">// 请假天数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建审批人</span></span><br><span class="line">        Handler zhangsan = <span class="keyword">new</span> Director(<span class="string">"张三"</span>);</span><br><span class="line">        Handler lisi = <span class="keyword">new</span> Manager(<span class="string">"李四"</span>);</span><br><span class="line">        Handler wangwu = <span class="keyword">new</span> TopManager(<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建责任链</span></span><br><span class="line">        zhangsan.setNextHandler(lisi);</span><br><span class="line">        lisi.setNextHandler(wangwu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起请假申请第一次</span></span><br><span class="line">        <span class="keyword">boolean</span> result1 = zhangsan.process(<span class="keyword">new</span> LeaveRequest(<span class="string">"小旋锋"</span>, <span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"最终结果："</span> + result1 + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起请假申请第二次</span></span><br><span class="line">        <span class="keyword">boolean</span> result2 = zhangsan.process(<span class="keyword">new</span> LeaveRequest(<span class="string">"小旋锋"</span>, <span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">"最终结果："</span> + result2 + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起请假申请第三次</span></span><br><span class="line">        <span class="keyword">boolean</span> result3 = zhangsan.process(<span class="keyword">new</span> LeaveRequest(<span class="string">"小旋锋"</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"最终结果："</span> + result3 + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考的是:<a href="https://juejin.im/post/6844903702260629512#heading-11" target="_blank" rel="noopener">https://juejin.im/post/6844903702260629512#heading-11</a><br>感觉举的例子的业务显示还不是特别的好理解,等之后把SpringMVC的源码学文案了,再举个例子</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis源码二(MapperProxy)</title>
    <url>/2017/06/15/26.mybatis%E6%BA%90%E7%A0%81%E4%BA%8C(MapperProxy)/</url>
    <content><![CDATA[<h3 id="一-sqlSession"><a href="#一-sqlSession" class="headerlink" title="一:sqlSession"></a>一:sqlSession</h3><p>在上一篇文章写到了sqlSession创建</p>
<p>SqlSession可以说是整个MyBatis的重中之重，在SqlSession中涉及到前一篇四大对象：Executor、StatementHandler、ParameterHandler、ResultHandler，所以在此先只对SqlSession有一个大概的了解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession = SessionFactory.getSqlSession(resource); </span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>在代码中我们可以看到当我们构造出一个SqlSession实例过后，可以通过SqlSession构造出Mappper映射器。UserMapper是一个接口，那么我们可以肯定的是，它一定是用了Java的动态代理生成了一个代理类。</p>
<p>通过打断点调试我们可以发现确实产生了一个叫MapperProxy的代理类。</p>
<h3 id="二-MapperProxy的代理类"><a href="#二-MapperProxy的代理类" class="headerlink" title="二:MapperProxy的代理类"></a>二:MapperProxy的代理类</h3><p>下面是DefaultSqlSession的getMapper方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.apache.ibatis.session.default.DefaultSqlSession</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> configuration.&lt;T&gt;getMapper(type, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这是一个泛型方法。看来是调用了Configuration的getMapper方法，还不是DefaultSqlSession实现了getMapper。接着再看Configuration的getMapper方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.apache.ibatis.session.Configuration</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Configuration.getMapper一共两个参数，一个是Class类型，一个是SqlSession，在DefaultSqlSession.getMapper调用Configuration.getMapper时，将传递进来的Class类型参数和其本身传递给了Configuration.getMapper。此时还不是在Configuration中实现了getMapper，看来还是一个叫做mapperRegistry的变量。this 这里是指sqlSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.apache.ibatis.session.Configuration</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> MapperRegistry mapperRegistry = <span class="keyword">new</span> MapperRegistry(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>



<p>看着名字好像是注册Mapper映射器的地方，想来也是，既然要得到Mapper的映射，那么所有的Mapper都要一个地方去注册（在我们的mybytis-config.xml里），注册好过后需要的时候再去查找是否已经注册，那么就是MapperRegistry，所以取一个好的变量名是非常重要的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.apache.ibatis.binding.MapperRegistry</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">  <span class="keyword">if</span> (mapperProxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is not known to the MapperRegistry."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Error getting mapper instance. Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>一个叫knownMappers的变量取出MapperProxyFactory。这个knownMapper的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt;();</span><br></pre></td></tr></table></figure>



<p>既然能用get方法取，那说明就有add方法咯？果不其然我们在MapperRegistry类中发现了public <T> void addMapper(Class<T> type)方法，那么是在哪里调用的这个方法呢？</p>
<h3 id="三-我们来重新理一理。"><a href="#三-我们来重新理一理。" class="headerlink" title="三:我们来重新理一理。"></a>三:我们来重新理一理。</h3><p>使用MyBatis的第一步是配置mybatis-config.xml，配置好过后，mybatis-config跑起来的第一步也一定是首先解析xml配置文件，将解析好的配置文件各个配置参数放入Configuration对象中，包括Mapper的配置，所以应该是在解析xml文件的某个类中解析过来后调用Configuration的方法将mapper放置到MapperRegister中。事实也的确如此，有兴趣可以跟踪下代码看看。回到MapperRegistry.getMapper的方法中。</p>
<p>当我们一切正确时，我们就能获取到一个MapperProxyFactory实例。想必MapperProxy代理类的生成正是通过MapperProxyFactory工厂类构建的，即第8行代码。进入MapperProxyFactory类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.apache.ibatis.binding.MapperProxyFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在这里终于看到了MapperProxy代理类，是通过sqlSession、mapperInterface、mechodCache三个参数构造的。</p>
<p>newInstance有一个重载方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四-MapperProxy"><a href="#四-MapperProxy" class="headerlink" title="四:MapperProxy"></a>四:MapperProxy</h3><p>终于是走到头了，这里就是返回的一个代理类实例。最后来看看MapperProxy。</p>
<p>MapperProxy是一个重要的类，所以我们将其代码全部贴出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.apache.ibatis.binding.MapperProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6424540398559729838L</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSession;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    <span class="keyword">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">    <span class="keyword">this</span>.methodCache = methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MapperMethod <span class="title">cachedMapperMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    MapperMethod mapperMethod = methodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (mapperMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">      mapperMethod = <span class="keyword">new</span> MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">      methodCache.put(method, mapperMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mapperMethod;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>要使用Java的动态代理就必须得实现InvocationHandler接口，从下面代码中首先判断代理对象是一个接口还是一个类，显然我们没有对mapper接口进行任何实现，那么它将生成一个MapperMethod对象，接着调用其execute方法，把sqlSession和参数传递进去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://www.cnblogs.com/yulinfeng/p/6063974.html" target="_blank" rel="noopener">https://www.cnblogs.com/yulinfeng/p/6063974.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>mybatis源码一(SqlSessionFactory)</title>
    <url>/2017/06/15/25.mybatis%E6%BA%90%E7%A0%81%E4%B8%80(SqlSessionFactory)/</url>
    <content><![CDATA[<h3 id="一-首先"><a href="#一-首先" class="headerlink" title="一:首先"></a>一:首先</h3><p>对MyBatis的使用我们在最开始都已经知道可以通过<code>xml配置文件</code>的方式，也可以通过<code>Java</code>代码创建<code>Configuration</code>对象的方式。  这两者实际上是一样，<code>xml配置文件的方式最终也是通过解析xml配置文件创建一个Configuration对象</code>。可能对于很多人(我也是)来说MyBatis通常是和Spring配合使用，用了N年MyBatis也不能把MyBatis说个所以出来</p>
<p>回顾一下mybatis实例的创建过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步，创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">// 第二步，加载配置文件</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="comment">// 第三步，创建SqlSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line"><span class="comment">// 第四步，创建SqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 第五步，使用SqlSession对象执行查询，得到User对象</span></span><br><span class="line"><span class="comment">// 第一个参数：执行查询的StatementId</span></span><br><span class="line">User user = sqlSession.selectOne(<span class="string">"getUserById"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 第六步，打印结果</span></span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">// 第七步，释放资源，每一个sqlSession就是一个连接</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<h3 id="二-创建-SqlSessionFactory"><a href="#二-创建-SqlSessionFactory" class="headerlink" title="二:创建 SqlSessionFactory"></a>二:创建 SqlSessionFactory</h3><p>在创建一个<code>SqlSession</code>实例时，首先需要创建一个<code>SqlSessionFactory实例</code>，而又需要通过<code>SqlSessionFactoryBuilder()build()</code>来创建<code>SqlSessionFactory</code></p>
<p>先看<code>SqlSessionFactoryBuilder</code>这个类,放在<code>package org.apache.ibatis.session</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//--------------------------------通过读取字符流（Reader）的方式构件SqlSessionFactory-----------------</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(reader, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader, String environment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(reader, environment, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader, Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(reader, <span class="keyword">null</span>, properties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(reader, environment, properties);</span><br><span class="line">      <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        reader.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// Intentionally ignore. Prefer previous error.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//-----------------------通过读取字符流（Reader）的方式构件SqlSessionFactory---------------</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(inputStream, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(inputStream, environment, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(inputStream, <span class="keyword">null</span>, properties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">      <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// Intentionally ignore. Prefer previous error.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//--------------------------------创建SqlSessionFactory--------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第1,2种方式是通过配置文件方式，第3种是通过Java代码方式。</li>
</ul>
<h3 id="三-是如何创建SqlSessionFactory的"><a href="#三-是如何创建SqlSessionFactory的" class="headerlink" title="三.是如何创建SqlSessionFactory的"></a>三.是如何创建SqlSessionFactory的</h3><p>以通过<code>InputStream字节流</code>的方式来看，和它相关的一共有4个构造方法，其中第2个和第3个参数并不陌生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties)</span><br></pre></td></tr></table></figure>

<p>这相当于在告诉这两个配置项<code>environment</code>,<code>properties</code>是可以通过在构建<code>SqlSessionFactory</code>的时候进行配置的或重新配置（此时优先级最高）。<code>XMLConfigBuilder工具类</code>对配置文件进行解析成Configuration对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参考上面的代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">	XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">	<span class="keyword">return</span> build(parser.parse());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再调用<code>构建出SqlSessionFactory</code>,构建出<code>SqlSessionFactory</code></p>
<h3 id="四-所以"><a href="#四-所以" class="headerlink" title="四 所以"></a>四 所以</h3><p>兜兜转转，不管是配置文件还是Java代码，最后都会经过解析通过<code>Configuration</code>对象产生<code>SqlSessionFactory</code>,也就是最后一个<code>build(Configuration config)</code>。</p>
<p>然而看最后一个方法的时候,返回的不是<code>SqlSessionFactory</code>,而是<code>DefaultSqlSessionFactory实例</code>,那是因为实际上<code>SqlSessionFactory</code>是一个接口，而<code>DefaultSqlSessionFactory</code>是它的实现类.暂且不管<code>SqlSessionManager</code>，暂时只需知道<code>SqlSessionFactory</code>有<code>DefaultSqlSessionFactory</code>和<code>SqlSessionManager</code>。</p>
<p>回顾SqlSession的创建过程，其实我们也能猜测得到SqlSessionFactory一定主要是创建SqlSession实例的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span></span>;</span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(Connection connection)</span></span>;</span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(TransactionIsolationLevel level)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType)</span></span>;</span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType, <span class="keyword">boolean</span> autoCommit)</span></span>;</span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level)</span></span>;</span><br><span class="line">  <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType execType, Connection connection)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function">Configuration <span class="title">getConfiguration</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么多的openSession重载方法，都是通过传入不同的参数构造SqlSession实例</p>
<ul>
<li>有通过设置事务是否自动提交”autoCommit”.</li>
<li>有设置执行器类型”ExecutorType”来构造的</li>
<li>还有事务的隔离级别等等</li>
</ul>
<p>至于DefaultSqlSessionFactory对SqlSessionFactory的具体实现，除了以上方法之外，还包括了：openSessionFromDataSource、openSessionFromConnection、getTransactionFactoryFromEnvironment、closeTransaction。到这里我们似乎还是只停留在表面，并没有涉及相对比较底层的代码啊</p>
<p>我们这是刚走了一遍<code>SqlSession</code>创建过程的流程。</p>
<h3 id="五-下面我们从return-new-DefaultSqlSessionFactory-config-开始。"><a href="#五-下面我们从return-new-DefaultSqlSessionFactory-config-开始。" class="headerlink" title="五: 下面我们从return new DefaultSqlSessionFactory(config)开始。"></a>五: 下面我们从return new DefaultSqlSessionFactory(config)开始。</h3><p>由于SqlSessionFactory的实现类DefaultSqlSessionFactory，源码过长，我们在其中以截取关键的代码作为解读。</p>
<p>DefaultSqlSessionFactory中的第1行代码实际上就非常值得我们思考：final关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br></pre></td></tr></table></figure>

<p>为什么会使用final关键字对Configuration对象进行修饰呢？</p>
<ul>
<li>Configuration应该是存在于MyBatis的整个生命周期那么意味着它应该是有且仅有一个实例的，而final关键字修饰的变量字段就代表它是不可变对象</li>
<li>这也恰好能解释说明官方所说的<code>SqlSessionFactory</code>应该是<code>单例</code>的。</li>
</ul>
<p>首先，MyBatis认为配置文件之所以是配置文件,那么就以为着它只有一种配置，就好比我们将一个新手机买回来过后，设置时间、日期就不再去更改，但我们可能会出国，这个时候就要配置选用另一个时区的时间，不过我还是使用的是这个手机的设置，换句话说，你的手机不可能有两个系统设置吧。</p>
<p>所以Configuration对象实际上就是我们手机上的系统设置。而SqlSessionFactory是通过Configuration来构造SqlSession的，对Configuration的引用当然是不可变的，如果可变，那相当于你手机里岂不是可以新建一个系统设置？那不就乱套了？索性final，对象不可变。</p>
<p>此时也就建议SqlSessionFactory是单例的了，你构建N个SqlSessionFactory，它们也是通过一个Configuration对象来构造的SqlSession实例，那还有必要有N个SqlSessionFactory了吗？显然没有必要，所以最好就是将SqlSessionFactory设计为单例。</p>
<p>这才对DefaultSqlSessionFactory类第一句话进行了解读，接着就是实现SqlSessionFactory接口的8个构造方法。<code>DefaultSqlSessionFactory</code>并没有直接实现这8个构造方法而是调用另外两个新的方法.</p>
<p>这8个构造方法实际上分为两大类：</p>
<ul>
<li>一个是从数据源中获取SqlSession.</li>
<li>一个是从Connection中获取SqlSession（包含Connection参数的那两个构造函数）。</li>
</ul>
<p>先看从数据源中获取SqlSession。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">      <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error opening session.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>如果没有传入ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit这三个参数就代表使用我们Configuration对象中的配置（看来Executor、TransactionIsolationLevel、autoCommit是可以灵活配置的）。第8行创建出一个DefaultSqlSession实例，可以猜测SqlSession是一个接口而DefaultSqlSession是其实现类。对于SqlSession的创建过程，我们马上就要走到最后一步SqlSession的构建。而这也是最关键最重要最发杂的一步</p>
<p>参考:<a href="https://www.cnblogs.com/yulinfeng/p/6063974.html" target="_blank" rel="noopener">https://www.cnblogs.com/yulinfeng/p/6063974.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式-模板模式</title>
    <url>/2020/08/20/3.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在看Tomcat启动源码的时候,涉及到模板设计模式,不学模板设计模式,简直有点看不懂,学完了,也明白了,就是把公共的方法放在父类,然后父类调用子类的实现</p>
<h1 id="我自己写的"><a href="#我自己写的" class="headerlink" title="我自己写的"></a>我自己写的</h1><p>仿着Tomcat写的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLifecycle</span> <span class="keyword">implements</span> <span class="title">Lifecycle</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这里是公共方法"</span>);</span><br><span class="line">        run();</span><br><span class="line">        System.out.println(<span class="string">"这里也是公共方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerStandard</span> <span class="keyword">extends</span> <span class="title">AbstractLifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是实现,父类将调用我"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerStandard2</span> <span class="keyword">extends</span> <span class="title">AbstractLifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是实现2,父类将调用我"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ServerStandard serverStandard = <span class="keyword">new</span> ServerStandard();</span><br><span class="line">        serverStandard.init();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"============================================"</span>);</span><br><span class="line"></span><br><span class="line">        ServerStandard2 serverStandard2 = <span class="keyword">new</span> ServerStandard2();</span><br><span class="line">        serverStandard2.init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="别人的例子"><a href="#别人的例子" class="headerlink" title="别人的例子"></a>别人的例子</h1><p><a href="https://juejin.im/post/6844903520844382215" target="_blank" rel="noopener">https://juejin.im/post/6844903520844382215</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+Docker部署Maven聚合工程</title>
    <url>/2019/05/20/45.Jenkins+Docker%20%E9%83%A8%E7%BD%B2Maven%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>这几天,把公司的预发布环境,改成docker部署,遇到了一些坑,有jenkins里的部署脚本的问题,也有harbor仓库的问题,还有docker远程访问的问题,还有DooD….一堆坑<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154012.png" alt=""></p>
<a id="more"></a>

<p>Jenkins里,没有直接安装在Centos7上,是用的docker安装的jenkins</p>
<h3 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1.安装Docker"></a>1.安装Docker</h3><p>这个就简单了,随便都可以搜到,这里只是贴我安装的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载旧版本</span></span><br><span class="line">sudo yum remove docker docker-client  docker-client-latest  docker-common  docker-latest  docker-latest-logrotate  docker-logrotate  docker-selinux  docker-engine-selinux  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2</span><br><span class="line">           </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加yum源</span></span><br><span class="line">sudo yum-config-manager --add-repo  https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="2-安装Docker版本的Jenkins"><a href="#2-安装Docker版本的Jenkins" class="headerlink" title="2.安装Docker版本的Jenkins"></a>2.安装Docker版本的Jenkins</h3><p>先这样安装,在用Jenkins打镜像包的时候,就会有DooD的问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -u root \</span><br><span class="line">	-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">	-v $(which docker):/usr/bin/docker \</span><br><span class="line">	-p 8080:8080 \</span><br><span class="line">    -p 50000:50000 \</span><br><span class="line">    -v /home/jenkins:/var/jenkins_home \</span><br><span class="line">    --name jenkins \</span><br><span class="line">	jenkins/jenkins:lst</span><br></pre></td></tr></table></figure>

<ul>
<li>第2行是将宿主机的/var/run/docker.sock映射到容器中，这样在容器中运行的docker命令，就会在宿主机上来执行。</li>
<li>第3行是将宿主机的docker程序映射进容器中，这样本身没有安装docker的jenkins容器就可以执行docker命令了（事实上容器里是没有运行docker的服务的，我们只是用这个映射进容器的docker来作为客户端发送docker的指令到/var/run/docker.sock而已，儿/var/run/docker.sock已经被链接到宿主机了)</li>
</ul>
<p>访问:<a href="http://localhost:8080,安装插件,设置管理员密码">http://localhost:8080,安装插件,设置管理员密码</a></p>
<h3 id="3-介绍项目的目录-以及写Dockerfile"><a href="#3-介绍项目的目录-以及写Dockerfile" class="headerlink" title="3.介绍项目的目录,以及写Dockerfile"></a>3.介绍项目的目录,以及写Dockerfile</h3><h4 id="1-这里是用的是Maven的聚合工程"><a href="#1-这里是用的是Maven的聚合工程" class="headerlink" title="1.这里是用的是Maven的聚合工程"></a>1.这里是用的是Maven的聚合工程</h4><p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154020.png" alt=""></p>
<h4 id="2-Dockerfile"><a href="#2-Dockerfile" class="headerlink" title="2.Dockerfile"></a>2.Dockerfile</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD admin-server-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]</span><br></pre></td></tr></table></figure>
<p><code>admin-server-0.0.1-SNAPSHOT.jar</code>就是,maven打完包的包名</p>
<h4 id="3-Maven的pom-xml配置"><a href="#3-Maven的pom-xml配置" class="headerlink" title="3.Maven的pom.xml配置"></a>3.Maven的pom.xml配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>springboot/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>imageName</code>打的镜像名称,这里的镜像名称是:springboot/admin-server</li>
<li><code>dockerDirectory</code>指定docker文件夹的位置</li>
</ul>
<h3 id="4-新建Jenkins配置"><a href="#4-新建Jenkins配置" class="headerlink" title="4.新建Jenkins配置"></a>4.新建Jenkins配置</h3><p>配置Git仓库<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154028.png" alt=""></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154037.png" alt=""></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154046.png" alt=""></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154055.png" alt=""></p>
<ul>
<li>这个是让公司的运维写的脚本,在构建完成之后,把已经运行的容器<ul>
<li>docker stop admin-server  停止</li>
<li>docker rm admin-server 然后再删除</li>
</ul>
</li>
</ul>
<p>然后再运行</p>
<ul>
<li>-p 指定端口</li>
<li>-e “SPRING_PROFILES_ACTIVE=prerelease”  ,可以看成是启动jar的时候的,java -jar   admin-server.jar  –spring.profiles.active=prerelease  ,指定运行环境</li>
<li>– name 容器别名</li>
</ul>
<h3 id="5-出现的问题"><a href="#5-出现的问题" class="headerlink" title="5.出现的问题"></a>5.出现的问题</h3><p>如果docker run jenkins 没有指定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v $(which docker):/usr/bin/docker</span><br></pre></td></tr></table></figure>
<p>这里就不能打包,就是因为在jenkins里的容器中,没有安装对象,使用了-v ,就是把jenkins里所需要的docker映射到宿主docker中</p>
<h3 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h3><p>这里只是在Centos7的一台服务器里,安装了docker,运行了jenkins容器,在jenkins容器中,打包镜像,然后再同一台服务器中运行,使用生产中,并不会用这样的方式,下一篇就写使用harbor仓库,安装仓库也是很简单,只是在docker与docker,docker与仓库之间的通信需要https请求,遇到的问题</p>
<h3 id="7-参考的博客"><a href="#7-参考的博客" class="headerlink" title="7.参考的博客"></a>7.参考的博客</h3><p>1.解决是DooD的问题:<a href="http://www.up4dev.com/2018/11/27/run-docker-by-jenkins-in-docker/" target="_blank" rel="noopener">http://www.up4dev.com/2018/11/27/run-docker-by-jenkins-in-docker/</a><br>2.更多可访问我的博客:<a href="https://yanganlin.com">https://yanganlin.com</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>自动化构建</tag>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>SpringCloud</tag>
        <tag>Jenkins</tag>
        <tag>Docker</tag>
        <tag>部署</tag>
        <tag>运维</tag>
        <tag>Centos7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+ELK搭建</title>
    <url>/2019/06/06/52.Docker+ELK%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>换了个运行环境,重新搭建一套公司本地内部的ELK,之前也搭过(可访问:<a href="https://yanganlin.com/31.html),最近做什么事情都想用Docker,这次也用Docker,还算顺利,没掉什么坑里,上次搭建,也用用的6.2+的版本,这都过了一年,Elk这三个产品,都已经上7了,用docker搭建的还是用6.2.4,稳定不落伍就好">https://yanganlin.com/31.html),最近做什么事情都想用Docker,这次也用Docker,还算顺利,没掉什么坑里,上次搭建,也用用的6.2+的版本,这都过了一年,Elk这三个产品,都已经上7了,用docker搭建的还是用6.2.4,稳定不落伍就好</a><br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154252.jpeg" alt=""></p>
<a id="more"></a>

<h1 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h1><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    --name elasticsearch \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 9300:9300 \</span><br><span class="line">    -e "discovery.type=single-node" \</span><br><span class="line">    docker.elastic.co/elasticsearch/elasticsearch:6.2.4</span><br></pre></td></tr></table></figure>
<p>访问<code>http://localhost:9200</code></p>
<h1 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h1><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -u 0 \</span><br><span class="line">    --name kibana \</span><br><span class="line">    -p 5601:5601\</span><br><span class="line">    docker.elastic.co/kibana/kibana:6.2.4</span><br></pre></td></tr></table></figure>

<p>进入到容器内部:<code>docker exec -it kibana /bin/bash</code><br>找到kibana的配置文件:<code>/usr/share/kibana/config/ kibana.yml</code><br>重启容器:<code>doccker restart kibana</code></p>
<p>修改配置文件,因为要绕过x-pack的安全检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch.url: http://localhost:9200</span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: false</span><br></pre></td></tr></table></figure>

<h1 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h1><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -u 0 \</span><br><span class="line">    --name logstash \</span><br><span class="line">    -p 5044:5044\</span><br><span class="line">    docker.elastic.co/logstash/logstash:6.2.4</span><br></pre></td></tr></table></figure>

<p>进入容器:<code>docker exec -it logstash /bin/bash</code>  </p>
<p>找到文件:<code>/usr/share/logstash/pipeline</code>  </p>
<p>修改配置文件<code>logstash.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port &#x3D;&gt; 5044</span><br><span class="line">        codec &#x3D;&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts &#x3D;&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">        action &#x3D;&gt; &quot;index&quot;</span><br><span class="line">        index &#x3D;&gt; &quot;%&#123;[appname]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启容器:<code>doccker restart logstash</code></p>
<h1 id="SpringBoot配置Logstash"><a href="#SpringBoot配置Logstash" class="headerlink" title="SpringBoot配置Logstash"></a>SpringBoot配置Logstash</h1><p>logback.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">destination</span>&gt;</span>localhost:5044<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"appname":"eureka-server"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>pom.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Logstash</tag>
        <tag>ES</tag>
        <tag>ElasticSearch</tag>
        <tag>ELK</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud微服务Docker部署</title>
    <url>/2019/05/25/47.SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1Docker%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>前两写了两篇,都是为SpringCloud+Docker部署做准备,在部署的时候,不同服务器,不同的Docker容器之间的通信,还好没有掉到坑里去,在公司里用了新技术,还是很开心的,小有成就感,之前一直想用上Docker,太忙就忽略了,这次是老大让我搭建一个预发布环境,一直都是重复性的工作,就很枯燥,心想着用新技术吧,这三篇文章,都是在各种爬坑中过来的<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154151.png" alt=""></p>
<a id="more"></a>

<h1 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h1><p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154159.png" alt=""><br>跟之前写的一样都是Maven聚合工程,这里跟之前不一样的是,有个子模块的common,需要在构建的时候,install下,所有在jenkins 的 Pre Steps要配置<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154207.png" alt=""><br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154215.png" alt=""></p>
<h1 id="2-部署脚本"><a href="#2-部署脚本" class="headerlink" title="2.部署脚本"></a>2.部署脚本</h1><p>下面这个,跟之前写的一样,是部署在跟docker同一台服务器<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154222.png" alt=""></p>
<p>下面这个,是部署在另外一台服务器,大致步骤是:<br>1.在本地打完镜像<br>2.然后Push到私服仓库<br>3.使用Jenkins的SSh插件,执行远程脚本<br>4.在远程的服务器(IP:10.19.44.21),拉取私服的镜像<br>5.在远程服务器,docker run<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154229.png" alt=""><br>图片上的序号:<br>这里截的是另外一个项目的图,项目的目录结构是跟上面是一样的<br>1.给镜像打Tag<br>2.登录镜像私服<br>3.推送镜像到私服<br>4.这是配置好的SSH插件的远程服务器的信息<br>5.删除已经运行的容器<br>6.指定目标服务器的IP,这个是为了让SpringCloud能发现,下面会接着写<br>7.指定profile环境<br>8.运行</p>
<h1 id="3-解释第六步"><a href="#3-解释第六步" class="headerlink" title="3.解释第六步"></a>3.解释第六步</h1><p>如果不指定<code>-e &quot;EUREKA_INSTANCE_IP-ADDRESS=10.19.44.21&quot; \</code></p>
<p>在Eureka的管理界面,左下角会显示的docker容器的内网IP,这样,另外一台Docker容器就会访问不到,所有要配置<code>-e &quot;EUREKA_INSTANCE_IP-ADDRESS=10.19.44.21&quot; \</code>,再打开Eureka<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154242.png" alt=""><br>这样不同服务器的docker容器才能访问</p>
<blockquote>
<p> 参考  </p>
</blockquote>
<p>我的博客 <a href="https://yanganlin.com">https://yanganlin.com</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Docker</tag>
        <tag>仓库</tag>
        <tag>Harbor</tag>
        <tag>私服</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker私服仓库Harbor安装</title>
    <url>/2019/05/22/46.Docker%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93Harbor%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Harbor安装那里还是很简单,就是在Docker Login那里掉坑里去了,搞半天,写博客的时候,又重新安装了一遍<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154105.jpeg" alt=""></p>
<a id="more"></a>

<h1 id="1-准备两台服务器"><a href="#1-准备两台服务器" class="headerlink" title="1.准备两台服务器"></a>1.准备两台服务器</h1><p>centos7<br>harbor 10.19.46.15<br>client 10.19.44.31</p>
<h1 id="2-harbor需要安装docker和docker-composere-client只需要安装docker"><a href="#2-harbor需要安装docker和docker-composere-client只需要安装docker" class="headerlink" title="2.harbor需要安装docker和docker-composere,client只需要安装docker"></a>2.harbor需要安装docker和docker-composere,client只需要安装docker</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Compose-安装"><a href="#Docker-Compose-安装" class="headerlink" title="Docker Compose 安装"></a>Docker Compose 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y python-pip</span><br><span class="line">pip install docker-compose</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<h2 id="harbor1-8-下载"><a href="#harbor1-8-下载" class="headerlink" title="harbor1.8 下载"></a>harbor1.8 下载</h2><p><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154113.png" alt=""></p>
<h2 id="解压出来"><a href="#解压出来" class="headerlink" title="解压出来"></a>解压出来</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@harbor harbor]# ll</span><br><span class="line">总用量 32</span><br><span class="line">-rw-r--r--. 1 root root  4519 5月  21 15:59 harbor.yml</span><br><span class="line">-rwxr-xr-x. 1 root root  5088 5月  21 15:59 install.sh</span><br><span class="line">-rw-r--r--. 1 root root 11347 5月  21 15:59 LICENSE</span><br><span class="line">-rwxr-xr-x. 1 root root  1654 5月  21 15:59 prepare</span><br></pre></td></tr></table></figure>

<h2 id="修改harbor-yml"><a href="#修改harbor-yml" class="headerlink" title="修改harbor.yml"></a>修改harbor.yml</h2><ul>
<li>hostname  这里设置本机的ip</li>
<li>harbor_admin_password web页面的密码</li>
<li></li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh ./install.sh</span><br></pre></td></tr></table></figure>

<h2 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">Status: Downloaded newer image for goharbor/harbor-registryctl:v1.8.0</span><br><span class="line">Creating harbor-log ... done</span><br><span class="line">Creating harbor-db   ... done</span><br><span class="line">Creating registry    ... done</span><br><span class="line">Creating redis       ... done</span><br><span class="line">Creating registryctl ... done</span><br><span class="line">Creating harbor-core ... done</span><br><span class="line">Creating harbor-jobservice ... done</span><br><span class="line">Creating harbor-portal     ... done</span><br><span class="line">Creating nginx             ... done</span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://10.19.46.15. </span><br><span class="line">For more details, please visit https://github.com/goharbor/harbor .</span><br></pre></td></tr></table></figure>

<h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><p><code>http://10.19.46.15</code><br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154119.png" alt=""></p>
<h2 id="如果想要停止-或者是服务器重启了-需要手动重启-在harbor的安装目录-里执行命令"><a href="#如果想要停止-或者是服务器重启了-需要手动重启-在harbor的安装目录-里执行命令" class="headerlink" title="如果想要停止,或者是服务器重启了,需要手动重启,在harbor的安装目录,里执行命令"></a>如果想要停止,或者是服务器重启了,需要手动重启,在harbor的安装目录,里执行命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@harbor harbor]# ll</span><br><span class="line">总用量 40</span><br><span class="line">drwxr-xr-x. 3 root root    20 5月  22 22:24 common</span><br><span class="line">-rw-r-----. 1 root root  5183 5月  22 22:24 docker-compose.yml</span><br><span class="line">-rw-r--r--. 1 root root  4514 5月  22 22:23 harbor.yml</span><br><span class="line">-rwxr-xr-x. 1 root root  5088 5月  21 15:59 install.sh</span><br><span class="line">-rw-r--r--. 1 root root 11347 5月  21 15:59 LICENSE</span><br><span class="line">-rwxr-xr-x. 1 root root  1654 5月  21 15:59 prepare</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">[root@harbor harbor]# docker-compose stop</span><br><span class="line">Stopping nginx             ... done</span><br><span class="line">Stopping harbor-portal     ... done</span><br><span class="line">Stopping harbor-jobservice ... done</span><br><span class="line">Stopping harbor-core       ... done</span><br><span class="line">Stopping registryctl       ... done</span><br><span class="line">Stopping redis             ... done</span><br><span class="line">Stopping registry          ... done</span><br><span class="line">Stopping harbor-db         ... done</span><br><span class="line">Stopping harbor-log        ... done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">[root@harbor harbor]# docker-compose start</span><br><span class="line">Starting log         ... done</span><br><span class="line">Starting postgresql  ... done</span><br><span class="line">Starting redis       ... done</span><br><span class="line">Starting registry    ... done</span><br><span class="line">Starting core        ... done</span><br><span class="line">Starting jobservice  ... done</span><br><span class="line">Starting portal      ... done</span><br><span class="line">Starting proxy       ... done</span><br><span class="line">Starting registryctl ... done</span><br></pre></td></tr></table></figure>


<h1 id="在另外一个服务器-client-登录harbor"><a href="#在另外一个服务器-client-登录harbor" class="headerlink" title="在另外一个服务器(client)登录harbor"></a>在另外一个服务器(client)登录harbor</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@client ~]# docker login 10.19.46.15</span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: Get https://10.19.46.15/v2/: dial tcp 10.19.46.15:443: connect: connection refused</span><br></pre></td></tr></table></figure>
<p>这是因为docker1.3.2版本开始默认docker registry使用的是https，我们设置Harbor默认http方式，所以当执行用docker login、pull、push等命令操作非https的docker regsitry的时就会报错。</p>
<h1 id="解决https"><a href="#解决https" class="headerlink" title="解决https"></a>解决https</h1><p>在harbor那台服务器,在harbor的安装目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154128.png" alt=""></p>
<p>然后同时编辑harbor和client的docker配置文件,<code>10.19.46.15 是harbor的ip地址</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "insecure-registries": [</span><br><span class="line">        "10.19.46.15"</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.添加ExecStart=/usr/bin/dockerd  |--insecure-registry=10.19.46.15</span></span><br><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把这行注释掉,添加下面的配置 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">                |--insecure-registry=10.19.46.15</span><br></pre></td></tr></table></figure>

<p>1.重启harbor 的 docker-compose,命令文上有<br>2.重启docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>


<h1 id="client-登录仓库"><a href="#client-登录仓库" class="headerlink" title="client 登录仓库"></a>client 登录仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@client ~]# docker login 10.19.46.15   </span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>


<h1 id="偷工减料"><a href="#偷工减料" class="headerlink" title="偷工减料"></a>偷工减料</h1><p>pull 的命令<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154135.png" alt=""></p>
<p>推送和打tag的命令<br><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154143.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>harbor的安装:<a href="https://blog.csdn.net/weixin_42082634/article/details/82850298" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42082634/article/details/82850298</a><br>更多可访问我的博客:<a href="https://yanganlin.com">https://yanganlin.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>仓库</tag>
        <tag>Harbor</tag>
        <tag>私服</tag>
      </tags>
  </entry>
  <entry>
    <title>事件驱动编程</title>
    <url>/2019/06/15/54.%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>看完公司的基于Netty的游戏框架,框架中用到了多态,函数式编程和事件驱动编程,第一次看到事件驱动的时候,就想到跟观察者模式很像.  </p>
<p>事件驱动初上手感觉还很好用,在我自己写的项目里,要写很多爬虫,比如下面爬虫的例子,我只是想关心拼接URL地址,和关心不同的网站怎么解析DOM元素,写一个回调就好</p>
<p>多态,函数式编程和事件驱动编程,这三个还是然让我学到很多,可以用一个框架的基础,比如在Netty中,继承<code>SimpleChannelInboundHandler&lt;TextWebSocketFrame&gt;</code>,实现这里里面的方法,就能接收到请求,很方便.</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154302.png" alt=""></p>
<a id="more"></a>

<h3 id="1-JAVA回调的例子"><a href="#1-JAVA回调的例子" class="headerlink" title="1.JAVA回调的例子"></a>1.JAVA回调的例子</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Description java回调</span><br><span class="line"> * @Author Anthony</span><br><span class="line"> * @Date 2019/6/15</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">interface Callback &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,String&gt; parse(String html);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class CallbackDemo &#123;</span><br><span class="line"></span><br><span class="line">    // 爬虫工具类</span><br><span class="line">    static Map&lt;String,String&gt; send(String URL, Callback callback) &#123;</span><br><span class="line"></span><br><span class="line">        // 模拟爬虫返回的数据</span><br><span class="line">        String spiderResponse = "";</span><br><span class="line"></span><br><span class="line">        if ("http://www.baidu.com".equals(URL)) &#123;</span><br><span class="line">            spiderResponse = "name=baidu&amp;age=23";</span><br><span class="line"></span><br><span class="line">        &#125;else if("http://www.qq.com".equals(URL))&#123;</span><br><span class="line">            spiderResponse = "name=mahuateng&amp;age=24";</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 回调方法</span><br><span class="line">        return callback.parse(spiderResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String URL = "http://www.baidu.com";</span><br><span class="line">        Map&lt;String, String&gt; send = send(URL, gbk -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            // 切分&amp;</span><br><span class="line">            String[] split = gbk.split("&amp;");</span><br><span class="line"></span><br><span class="line">            // name</span><br><span class="line">            map.put(split[0].split("=")[0], split[0].split("=")[1]);</span><br><span class="line"></span><br><span class="line">            // age</span><br><span class="line">            map.put(split[1].split("=")[0], split[0].split("=")[1]);</span><br><span class="line"></span><br><span class="line">            return map;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(send.get("name"));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样写各种简单的java爬虫的时候,只需要关心URL,和怎么分析爬虫返回的数据</p>
<h3 id="2-观察者模式中的多态的例子"><a href="#2-观察者模式中的多态的例子" class="headerlink" title="2.观察者模式中的多态的例子"></a>2.观察者模式中的多态的例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> JAVA多态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Anthony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/6/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImpl</span> <span class="keyword">extends</span> <span class="title">MyCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Myimpl method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCallback impl = <span class="keyword">new</span> MyImpl();</span><br><span class="line">        impl.method();</span><br><span class="line">        impl.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-观察者模式的例子"><a href="#3-观察者模式的例子" class="headerlink" title="3.观察者模式的例子"></a>3.观察者模式的例子</h3><p>参考的是菜鸟教程中设计模式的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 观察者模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Anthony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/6/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 Observer 类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 Subject 类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最重要的地方</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最重要的地方</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建实体观察者类。1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    BinaryObserver(Subject subject)&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"BinaryObserver: "</span>+ Integer.toBinaryString( subject.getState() ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建实体观察者类。2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OctalObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    OctalObserver(Subject subject)&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"OctalObserver: "</span> + Integer.toOctalString( subject.getState() ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> OctalObserver(subject);</span><br><span class="line">        <span class="keyword">new</span> BinaryObserver(subject);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第一次状态改变: 15"</span>);</span><br><span class="line">        subject.setState(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第二次状态改变: 10"</span>);</span><br><span class="line">        subject.setState(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一次状态改变: 15</span><br><span class="line">OctalObserver: 17</span><br><span class="line">BinaryObserver: 1111</span><br><span class="line">第二次状态改变: 10</span><br><span class="line">OctalObserver: 12</span><br><span class="line">BinaryObserver: 1010</span><br></pre></td></tr></table></figure>

<h3 id="事件驱动编程"><a href="#事件驱动编程" class="headerlink" title="事件驱动编程"></a>事件驱动编程</h3><p>虽然看了事件驱动的定义,虽然知道是什么意思,但是不知道该怎么说出来,大概就是,写个while循环遍历队列,或者集合的中数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 事件驱动编程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Anthony</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/6/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClickCall</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">click</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ClickCall clickCall;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(String msg,ClickCall clickCall)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.clickCall = clickCall;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java 栈,也可以当做是队列之类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Stack&lt;MyTask&gt; list = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟鼠标点击</span></span><br><span class="line">        list.push(<span class="keyword">new</span> MyTask(<span class="string">"右键"</span>,msg-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"右手点击鼠标"</span>+msg;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        list.push(<span class="keyword">new</span> MyTask(<span class="string">"左键"</span>,msg-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"左手点击鼠标"</span>+msg;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个线程循环List</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span> &amp;&amp; !list.empty()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// pop 方法,从栈顶移除一个,并打印出来</span></span><br><span class="line">                MyTask pop = list.pop();</span><br><span class="line">                System.out.println(pop.clickCall.click(pop.msg));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>函数式编程</tag>
        <tag>基础</tag>
        <tag>java</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群安装</title>
    <url>/2019/07/02/56.Redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>看了几年前的Redis集群安装,那还是3.4的Redis,恍如时光  </p>
<p>在Github上下载了一个项目,spring也没有用上,各种都是那人自己手动封装,包括解析xml,牛逼是牛逼,倒是跑起来也是贼麻烦的,一直卡在Redis的集群里,本来想让公司的运维装个Redis集群直接让我用, 结过,弄了两次,代码连接redis一直报错</p>
<p>也不太想麻烦别人了,就自己临时搭一个,还是招这几年前的笔记,哈哈哈,有点怀恋</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154313.jpeg" alt=""></p>
<a id="more"></a>

<h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><p>用两台虚拟机模拟6个节点，一台机器3个节点，创建出3 master、3 salve 环境。</p>
<table>
<thead>
<tr>
<th>worker1</th>
<th>worker2</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.0.179</td>
<td>7000</td>
</tr>
<tr>
<td>192.168.0.179</td>
<td>7001</td>
</tr>
<tr>
<td>192.168.0.179</td>
<td>7002</td>
</tr>
<tr>
<td>192.168.0.100</td>
<td>7003</td>
</tr>
<tr>
<td>192.168.0.100</td>
<td>7004</td>
</tr>
<tr>
<td>192.168.0.100</td>
<td>7005</td>
</tr>
</tbody></table>
<h3 id="2-下载-解压-编译安装"><a href="#2-下载-解压-编译安装" class="headerlink" title="2.下载,解压,编译安装"></a>2.下载,解压,编译安装</h3><p>在worker1上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line">tar -zxvf redis-5.0.5.tar.gz</span><br><span class="line">cd redis-5.0.5</span><br><span class="line">make &amp;&amp; make instal</span><br></pre></td></tr></table></figure>
<p>注意make的时候可能会报错,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure>

<h3 id="3-创建节点-在worker1"><a href="#3-创建节点-在worker1" class="headerlink" title="3.创建节点,在worker1"></a>3.创建节点,在worker1</h3><p>创建文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir redis_cluster</span><br><span class="line">cd redis_cluster</span><br><span class="line">mkdir 7000</span><br><span class="line">mkdir 7001</span><br><span class="line">mkdir 7002</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7000/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7001/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7002/</span><br></pre></td></tr></table></figure>

<p>分别修改三个文件夹里的配置文件,修改如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port  7000      &#x2F;&#x2F;端口7000,7002,7003       </span><br><span class="line">bind 0.0.0.0     &#x2F;&#x2F;自己建议修改为0.0.0.0</span><br><span class="line">daemonize yes   &#x2F;&#x2F;redis后台运行</span><br><span class="line">pidfile  &#x2F;var&#x2F;run&#x2F;redis_7000.pid    &#x2F;&#x2F;pidfile文件对应7000,7001,7002</span><br><span class="line">cluster-enabled  yes    &#x2F;&#x2F;开启集群  把注释#去掉</span><br><span class="line">cluster-config-file  nodes_7000.conf   &#x2F;&#x2F;集群的配置,配置文件首次启动自动生成7000,7001,7002</span><br><span class="line">cluster-node-timeout  15000  &#x2F;&#x2F;请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  yes &#x2F;&#x2F;aof日志开启</span><br></pre></td></tr></table></figure>

<p>启动节点的redis<br><code>/usr/local/bin/redis-server</code> 这是在<code>make &amp; make install</code>生成的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/redis-server redis_cluster/7000/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7001/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7002/redis.conf</span><br></pre></td></tr></table></figure>

<p>检查 redis 启动情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redi</span><br><span class="line">root      61020      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7000 [cluster]   </span><br><span class="line">root      61024      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7001 [cluster]   </span><br><span class="line">root      61029      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7002 [cluster]</span><br></pre></td></tr></table></figure>
<h3 id="4-再在worker2-上做相同的操作"><a href="#4-再在worker2-上做相同的操作" class="headerlink" title="4.再在worker2 上做相同的操作"></a>4.再在worker2 上做相同的操作</h3><h3 id="5-启动集群"><a href="#5-启动集群" class="headerlink" title="5.启动集群"></a>5.启动集群</h3><p>装的redis是5.x的版本,这里没有应用到<code>redis-trib.rb</code>,所以就不需要装ruby</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin</span><br><span class="line">redis-cli --cluster create 192.168.0.100:7003 192.168.0.100:7004 192.168.0.100:7005 192.168.0.179:7000 192.168.0.179:7001 192.168.0.179:7002 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p>遇到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Can I set the above configuration? (type 'yes' to accept): yes</span><br></pre></td></tr></table></figure>
<p>输入<code>yes</code></p>
<h3 id="6-校验-等运行完成"><a href="#6-校验-等运行完成" class="headerlink" title="6.校验,等运行完成"></a>6.校验,等运行完成</h3><p><code>redis-cli --cluster check 192.168.0.179:7000</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@worker1 src]# redis-cli --cluster check 192.168.0.179:7000</span><br><span class="line">192.168.0.179:7000 (27bce53b...) -&gt; 0 keys | 5462 slots | 1 slaves.</span><br><span class="line">192.168.0.100:7004 (6b0173d9...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">192.168.0.100:7003 (9f15a932...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">[OK] 0 keys in 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.0.179:7000)</span><br><span class="line">M: 27bce53bda92341ca4a5c82c2361ab99f24c0b27 192.168.0.179:7000</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: c7ebcd900fb7d9afb1980797acba45518cb7d877 192.168.0.100:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 27bce53bda92341ca4a5c82c2361ab99f24c0b27</span><br><span class="line">S: ed5256f8db1bf556a8dadbe8f2b07699507e17d9 192.168.0.179:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6b0173d925f70807a9081b7bc09bcd37be857342</span><br><span class="line">S: 758609eaea88bac25b864f2badbab2171a68089b 192.168.0.179:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9f15a9329a9d0ec5c7fcb5abbba817730f0942f9</span><br><span class="line">M: 6b0173d925f70807a9081b7bc09bcd37be857342 192.168.0.100:7004</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 9f15a9329a9d0ec5c7fcb5abbba817730f0942f9 192.168.0.100:7003</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<h3 id="7-Jedis操作Redis集群"><a href="#7-Jedis操作Redis集群" class="headerlink" title="7.Jedis操作Redis集群"></a>7.Jedis操作Redis集群</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisCluster jedisCluster=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;HostAndPort&gt; hostAndPorts=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Set&lt;HostAndPort&gt; <span class="title">getHostAndPort</span><span class="params">(String hostAndPort)</span></span>&#123;</span><br><span class="line">        Set&lt;HostAndPort&gt; hap = <span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        String[] hosts = hostAndPort.split(<span class="string">","</span>);</span><br><span class="line">        String[] hs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(String host:hosts)&#123;</span><br><span class="line">            hs=host.split(<span class="string">":"</span>);</span><br><span class="line">            hap.add(<span class="keyword">new</span> HostAndPort(hs[<span class="number">0</span>], Integer.parseInt(hs[<span class="number">1</span>])));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisCluster <span class="title">getJedisCluster</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GenericObjectPoolConfig gopc = <span class="keyword">new</span> GenericObjectPoolConfig();</span><br><span class="line">        gopc.setMaxTotal(<span class="number">32</span>);</span><br><span class="line">        gopc.setMaxIdle(<span class="number">4</span>);</span><br><span class="line">        gopc.setMaxWaitMillis(<span class="number">6000</span>);</span><br><span class="line">        hostAndPorts = getHostAndPort(<span class="string">"192.168.0.100:7003,192.168.0.100:7004,192.168.0.100:7005,192.168.0.179:7000,192.168.0.179:7001,192.168.0.179:7002"</span>);</span><br><span class="line">        jedisCluster = <span class="keyword">new</span> JedisCluster(hostAndPorts, <span class="number">2000</span>, <span class="number">2000</span>, <span class="number">3</span>,<span class="keyword">null</span>,gopc);</span><br><span class="line">        <span class="keyword">return</span> jedisCluster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        jedisCluster = getJedisCluster();</span><br><span class="line">        jedisCluster.set(<span class="string">"name"</span>, <span class="string">"anthony"</span>);</span><br><span class="line">        System.out.println(jedisCluster.get(<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>自己写的商业项目:服务器的坑</title>
    <url>/2019/10/13/62.%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>在<code>Vultr</code>里买了两天新加坡服务器</p>
<p>说Vultr哪里好</p>
<ul>
<li>就是简洁到,任何一处功能都是可以用上的,没有多余的按钮,连接,</li>
<li>可以用支付宝支付,也可以直接绑定Visa卡</li>
<li><code>1G 1核心</code>的服务器,一个月只要5美,对比亚马逊,阿里云的香港节点,华为的国外节点都更便宜,在东南亚连接国内的阿里云,命令行都是一个字母一个字母显示出来的</li>
<li>SSH连接速度很快,Maven下载jar包,或是Docker下载镜像,或是Jenkins下载插件速度都更快</li>
<li>不需要备案,HTTPS也不需要跟阿里那样,需要服务器运行慢三个月</li>
</ul>
<p>说Vultr不好</p>
<ul>
<li>提个工单,感觉那客服比我还不懂,看了系统的ssh登录日志,每时每刻都有不同的IP尝试访问,暴力破解中</li>
<li>阿里云现在报警系统感觉还是非常牛逼的,像SSH暴力破解都是发邮件提示,Vultr不行</li>
<li>买的一台服务器用Docker跑的Mysql,经常莫名其妙的密码不对,或者是那种勒索了数据库,要求我发多少比特币到那邮箱..阿里云的服务器就不会出现这个问题,已经出现过很多次这样的情况,就算设置的Mysql的访问IP,也没有作用</li>
</ul>
<p>实在忍受不了了,还是换回阿里云的服务器,<code>2G 2核心</code>一年760左右,感觉好贵呀,心疼…..,虽然命令行非常慢,主要是也没有太多操作,安装Docker,Mysql,Redis,Jenkins和jar包的启动脚本</p>
<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>阿里,亚马逊的数据库都贵,给一般企业用还差不多,本来也就开发的时候,和前端联调的时候回用上数据库,买包时的,又嫌麻烦,在Vultr上用docker跑的数据库,明明数据库密码是有很高复杂度的,但总是能被人访问,而且限制了IP访问,还是不起作用,我都怀疑,Vultr这家公司的服务器是不是有后门</p>
<p>还有个时区的问题,Mybatis插入数据库的当前时间,和获取那条记录的插入时间对不上,差8个小时,虽然大概知道是个怎么回事,但是绕了些弯路,整体解决下来就是:</p>
<ol>
<li>判断插入时间是不是正确的</li>
<li>修改服务器时间</li>
<li>修改docker容器的时间</li>
<li>修改SpringBoot的时间</li>
</ol>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>只是使用了一个简单的功能,域名转发,开始使用的Vultr的服务器,在阿里云域名解析,一下子就能成功,之后换成阿里云服务器之后,就一直解析不成功,用<code>IP:PORT</code>访问又是正常的,后来才发现服务器必须得满使用3个月,才可以用域名转发…慢慢等吧</p>
<p>在Vultr服务器上,因为域名是可以转发的,所以可以在Nginx那里配置SSL证书,免费申请的那种,各种百度一顿操作都是正常,可就是访问报错,一步一步找才发现,用docker跑Nginx的时候,并没有开启443端口……..我TM无语了,貌似Docker就这点不好,如果第一次运行容器的时候,把数据卷映射到服务器本地还好,如果没有映射,那凉凉还得重新来过,没想明白,那么强大的功能,为什么不给个,修改正在运行容器的启动命令(这里不考虑<code>docker commit</code>)</p>
<p>换到阿里云服务器,也就是域名不能转发成功,所以证书也自然而然配不上了</p>
]]></content>
      <categories>
        <category>杂事</category>
      </categories>
  </entry>
  <entry>
    <title>从头再来,立个flag</title>
    <url>/2019/10/13/63.%E4%BB%8E%E5%A4%B4%E5%86%8D%E6%9D%A5,%E7%AB%8B%E4%B8%AAflag/</url>
    <content><![CDATA[<p>做开发的时候,虽然不是很羡慕做管理的人,但是一直觉得做管理是个稍微轻松的活,工资不说,起码比开发高,这些天回国休假的同事都因为疫情来不了公司了,只能我上</p>
<p>这接近一个月的样子,都没有写代码了,每天各部门导出跑,开发提交代码,到测试,到最后上线,层层环节都有各种问题,特别严重的是之前同事开发的代码,都有各种坑,特别还是在线上,然后测试提禅道单,开发去改,发现是一个深坑,产品不知道需求,开发也不知道原来的需求是什么样子的,看代码,又发现逻辑对不上,所以出来Bug也不知道要怎么改</p>
<p>总之呢,这就是现在公司的现状,管理也没有想象中的那样轻松,分发任务,和Bug,开发人员也不够,也到处都是坑,这项目从0开始还好说,现在简直是从负数开始,也好久没有学习了,身心疲惫,轻松的时候,经常玩到4点多才睡觉,现在就是回去洗个澡就躺着就睡着了</p>
<p>今天回国休假的人也回公司了,我也想稍微的偷偷懒,业务什么的,实在是没有太多心思管,也不想管进度,让专门的人来做吧,我就本本分分的负责好技术</p>
<p>今晚下班的时候还不想回去,闲着的时候准备找个分布式的定时任务的源码看看的,看到拦截器那里,已经忘记拦截器和过滤器有什么区别了,不想看Spring了,最后决定,从头开始吧,从Servlet开始</p>
<p>就在这里立下一个Flag,还没有想好重点,就是想着从头来过,立志要做一个架构师的男人</p>
]]></content>
      <categories>
        <category>杂事</category>
      </categories>
  </entry>
  <entry>
    <title>自己写的商业项目:万事开头难</title>
    <url>/2019/09/22/60.%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE-%E4%B8%87%E4%BA%8B%E5%BC%80%E5%A4%B4%E9%9A%BE/</url>
    <content><![CDATA[<p>这两个月,时间过的也是很漫长的,公司的代码已经做了两个版本,各种Bug,我都有点无语了,其中有的代码是已经有了一年的历史了,理论上应该是非常稳定的了,可是到现在还时不时的出现问题,我也是很无奈,最无语的就是,有一些边缘的功能,业务也很简单,就是对一两张表做CRUD,经过一年的测试,等到我接受它相关的业务的时候,我去看那些代码,竟然还有的是错的,真的,我不知道是该骂人好,还是要怎么样,测试竟然没有测出一年的bug</p>
<p>这两个月,时间过的也是很短暂的,闲余的时间,我开始在写自己的商业项目,计划是今年内,或者是11月份内,要上线运行,万事开头难,从刚开始的时候,我都不知道要怎么开始,到现在的的,开始有了服务器,项目名称,和专业的设计,设计出来的LOGO,也开始接触第三方公司,一聊天的时候,别人就说,老板怎么怎么样,我顿时就觉得很尴尬,可能在别人眼里,我就是个有钱的老板,可是只有我才知道,我TM就是个穷人,有意无意的我也有说,现在项目还是个人开发的,然后我就不管别人怎么想的,别人提供服务,我给钱,合作的好,就继续合作,合作的不好,别人换个客户,我给钱给另外一个人,在接触第三方的时候,还是顺利的,毕竟给钱了得</p>
<p>没给钱的就很尴尬了,老是被人封IP,我都换了三个IP了,数据库经常被黑掉,那时也是安全没做好,老是有人把我的数据库删掉,添加张表,让我把比特币汇给那人,然后帮我恢复数据,刚开始的时候,都是没有备份的,后来实在是受不了了,就限制了IP访问…..</p>
<p>还有很多坑在里面,跟前端对接口,跟第三方对接口,配置服务器环境,自动化构建部署…..总之有各种各样的问题,都等着我百度,谷歌之后一个一个解决掉</p>
<p>现在项目已经有雏形了,各个环节都已经打通,就差调试,把整个流程跑通,当然业务功能也是最简单的,都是基本功能,参考同行的软件,不必要的功能都不要,麻烦的或者需要学习成本的功能也不要,怀着抖音,微信这样的方向去做,足够简单,又足够强大</p>
<p>当然也需要我足够强大才行,既能做的了架构,又能做开发,既能做运维,也能做客服,项目前期是真的没有什么人,万事开头难</p>
]]></content>
      <categories>
        <category>杂事</category>
      </categories>
  </entry>
  <entry>
    <title>Appium和夜神模拟器做自动化测试</title>
    <url>/2020/07/26/64.Appium%E5%92%8C%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>1.安装JAVA_HOME</p>
<p>2.安装ANDROID_HOME</p>
<p>3.安装夜神模拟器和安装appium和node.js</p>
<p>4.调试环境</p>
<p>4.编写python脚本</p>
<h2 id="1-安装JAVA-HOME环境"><a href="#1-安装JAVA-HOME环境" class="headerlink" title="1.安装JAVA_HOME环境"></a>1.安装JAVA_HOME环境</h2><p>这个很重要,特别是我经常用IDEA做开发,平常就很少配置JAVA_HOME环境变量,,变量名为:<code>ANDROID_HOME</code></p>
<h2 id="2-安装ANDROID-HOME环境"><a href="#2-安装ANDROID-HOME环境" class="headerlink" title="2.安装ANDROID_HOME环境"></a>2.安装ANDROID_HOME环境</h2><p>看网上的教程,都是去官网下了个安卓的SDK,我一上官网,就只是提示我下载Android Studio,所以就安装了这个软件,在软件的配置里面找到的安卓的SDK的目录,然后就配置了环境变量</p>
<p>变量名为:<code>ANDROID_HOME</code></p>
<p>变量值为:<code>C:\..\..\Android\Sdk</code></p>
<p>然后在<code>Path</code>里添加:</p>
<p><code>%ANDROID_HOME%\tools</code></p>
<p><code>%ANDROID_HOME%\platform-tools</code></p>
<h2 id="3-安装夜神模拟器和appium"><a href="#3-安装夜神模拟器和appium" class="headerlink" title="3.安装夜神模拟器和appium"></a>3.安装夜神模拟器和appium</h2><p>夜神模拟器就下载最新版本的就可以</p>
<p>appium也直接在网上下载安装好就行</p>
<h2 id="4-调试环境"><a href="#4-调试环境" class="headerlink" title="4.调试环境"></a>4.调试环境</h2><p>1.把<code>C:\Program Files (x86)\Nox\bin</code>添加到Path环境变量红</p>
<p>2.查看夜神模拟器的adb版本号:<code>nox_adb.exe version</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">y9507@DESKTOP-IAE2VRK  C:\Program Files (x86)\Nox\bin</span><br><span class="line">❯ .\nox_adb.exe version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 30.0.3-6597393</span><br><span class="line">Installed as C:\Program Files (x86)\Nox\bin\nox_adb.exe</span><br></pre></td></tr></table></figure>

<p>2查看adb版本号:<code>adb version</code>,这是安卓的sdk版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ adb version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 30.0.3-6597393</span><br><span class="line">Installed as C:\Users\xxxx\AppData\Local\Android\Sdk\platform-tools\adb.exe</span><br></pre></td></tr></table></figure>

<p>如果他们不一样,就把安卓的adb.exe拷贝到``C:\Program Files (x86)\Nox\bin<code>里,并改名</code>nox_adb.exe`,再看看版本号是不是就一样的了</p>
<p>3.夜神模拟器连接上安卓sdk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ ./nox_adb.exe connect 127.0.0.1:62001</span><br><span class="line">already connected to 127.0.0.1:62001</span><br></pre></td></tr></table></figure>

<p>4.启动appium,现在先使用默认的设置,点击启动服务器</p>
<p>appium是基于node.js开发的,前提要安装好node.js</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Appium] Welcome to Appium v1.17.1</span><br><span class="line">[Appium] Non-default server args:</span><br><span class="line">[Appium]   allowInsecure: &#123;</span><br><span class="line">[Appium]   &#125;</span><br><span class="line">[Appium]   denyInsecure: &#123;</span><br><span class="line">[Appium]   &#125;</span><br><span class="line">[Appium] Appium REST http interface listener started on 0.0.0.0:4723</span><br></pre></td></tr></table></figure>

<p>5.查看现在可用的手机设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62001 device</span><br></pre></td></tr></table></figure>

<p>注意看这里的<code>127.0.0.1:62001</code>,这是一个字符串,如果是用真实手机的话,这里显示的是一串连续的字符串</p>
<p>6.sdk连接appium</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appium -a 127.0.0.1 -p 4723 -U 127.0.0.1:62001</span><br></pre></td></tr></table></figure>

<p>-a 就是appium启动的ip地址</p>
<p>-a 就是appium启动的端口</p>
<p>-U 就是在第五步获取的字符串<code>127.0.0.1:62001</code>,连接这台手机设备</p>
<h2 id="5-编写脚本"><a href="#5-编写脚本" class="headerlink" title="5.编写脚本"></a>5.编写脚本</h2><p>安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install Appium-Python-Client</span><br></pre></td></tr></table></figure>

<p>脚本,这里是个简单的抖音的自动点赞功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">desired_caps =dict()</span><br><span class="line"><span class="comment"># 平台名称,安卓就是Android</span></span><br><span class="line">desired_caps[<span class="string">'platformName'</span>]=<span class="string">'Android'</span></span><br><span class="line"><span class="comment"># 平台的版本</span></span><br><span class="line">desired_caps[<span class="string">'platformVersion'</span>]=<span class="string">'5.1'</span></span><br><span class="line"><span class="comment"># 设备的名字,貌似可以随便写</span></span><br><span class="line">desired_caps[<span class="string">'deviceName'</span>]=<span class="string">'Android'</span></span><br><span class="line"><span class="comment"># 包名</span></span><br><span class="line">desired_caps[<span class="string">'appPackage'</span>]=<span class="string">'com.ss.android.ugc.aweme'</span></span><br><span class="line"><span class="comment"># 界面名</span></span><br><span class="line">desired_caps[<span class="string">'appActivity'</span>]=<span class="string">'.splash.SplashActivity'</span></span><br><span class="line"><span class="comment"># 不用每次都重新安装app</span></span><br><span class="line">desired_caps[<span class="string">'noReset'</span>] = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 输入中文</span></span><br><span class="line">desired_caps[<span class="string">'unicodekeyboard'</span>]=<span class="literal">True</span></span><br><span class="line">desired_caps[<span class="string">'resetkeyboard'</span>]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(<span class="string">'http://127.0.0.1:4723/wd/hub'</span>,desired_caps)</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 滑动</span></span><br><span class="line">    print(<span class="string">"开始滑动"</span>)</span><br><span class="line">    driver.swipe(<span class="number">200</span>,<span class="number">900</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>)</span><br><span class="line">    print(<span class="string">"滑动完成,休息"</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进入头像</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/en2"</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取关注人数</span></span><br><span class="line">    comment = <span class="literal">False</span></span><br><span class="line">    number = driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/arh"</span>).text</span><br><span class="line">    <span class="keyword">if</span> number.find(<span class="string">"w"</span>) != <span class="number">-1</span>:</span><br><span class="line">        print(<span class="string">"关注人数"</span>+str(number))</span><br><span class="line">        <span class="comment"># 关注</span></span><br><span class="line">        print(<span class="string">"开始点击关注"</span>)</span><br><span class="line">        driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/el4"</span>).click()</span><br><span class="line">        print(<span class="string">"开始点击完成"</span>)</span><br><span class="line">        comment=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"关注人数没有一万多,不操作了"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退到首页</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/ks"</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否要留言,关注了就留言</span></span><br><span class="line">    <span class="keyword">if</span> comment == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 点击评论按钮</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/acv"</span>).click()</span><br><span class="line">        <span class="comment"># 点击评论输入框</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/acp"</span>).click()</span><br><span class="line">        <span class="comment"># 写下评论</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/acp"</span>).send_keys(<span class="string">"太棒了"</span>)</span><br><span class="line">        <span class="comment"># 发送</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/ad_"</span>).click()</span><br><span class="line">        <span class="comment"># 关闭评论窗口</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">"com.ss.android.ugc.aweme:id/ks"</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">"一次循环完成"</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h2 id="其它APi"><a href="#其它APi" class="headerlink" title="其它APi"></a>其它APi</h2><h3 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从电脑上安装软件的手机上</span></span><br><span class="line">adb install ‪C:\迅雷下载\2a5b812be8277ae6f75b0fb736fab49a_72817400.apk</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过这个命令,看</span></span><br><span class="line">adb shell dumpsys window windows | findstr mFocusedApp</span><br></pre></td></tr></table></figure>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 滑动滑动</span></span><br><span class="line">driver.swipe(sx,sy,ex,edy,ms)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前的包名和界面明</span></span><br><span class="line">driver.current_package</span><br><span class="line">driver.current_activity</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐式等待</span></span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>杂事</category>
      </categories>
  </entry>
  <entry>
    <title>Redis数据类型</title>
    <url>/2020/08/14/65.Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154333.jpeg" alt=""><br>redis自身是一个Map,其中所有的数据都是采用key:value的形式存储</p>
<p>数据类型指的是存储的数据的类型，也就是value部分的类型，key部分永远都是字符串</p>
<ul>
<li>string –&gt; String</li>
<li>hash –&gt; Hashmap</li>
<li>list –&gt; LinkList</li>
<li>set –&gt; HashSet</li>
<li>sorted_set –&gt; TreeSet</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul>
<li>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</li>
<li>存储数据的格式：一个存储空间保存一个数据</li>
<li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用,最后实际上还是字符串</li>
</ul>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154343.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设值</span></span><br><span class="line">192.168.245.129:0&gt;set k1 anthony</span><br><span class="line">"OK"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取值</span></span><br><span class="line">192.168.245.129:0&gt;get k1</span><br><span class="line">"anthony"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除值,成功返回1</span></span><br><span class="line">192.168.245.129:0&gt;del k1</span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除值,不成功返回0</span></span><br><span class="line">192.168.245.129:0&gt;del k1234</span><br><span class="line">"0"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一次性存入多个值</span></span><br><span class="line">192.168.245.129:0&gt;mset k1 v1 k2 v2 k3 v3</span><br><span class="line">"OK"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一次性取出多个值</span></span><br><span class="line">192.168.245.129:0&gt;mget k1 k2 k3</span><br><span class="line"> 1)  "v1"</span><br><span class="line"> 2)  "v2"</span><br><span class="line"> 3)  "v3"</span><br><span class="line">192.168.245.129:0&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印值的长度</span></span><br><span class="line">192.168.245.129:1&gt;set name anthony</span><br><span class="line">"OK"</span><br><span class="line">192.168.245.129:1&gt;get name</span><br><span class="line">"anthony"</span><br><span class="line">192.168.245.129:1&gt;strlen name</span><br><span class="line">"7"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有数据就追加</span></span><br><span class="line">192.168.245.129:1&gt;append name 666</span><br><span class="line">"10"</span><br><span class="line">192.168.245.129:1&gt;get name</span><br><span class="line">"anthony666"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 没数据就新建</span></span><br><span class="line">192.168.245.129:1&gt;append othername frankie</span><br><span class="line">"7"</span><br><span class="line">192.168.245.129:1&gt;get othername</span><br><span class="line">"frankie"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递增递减,小数不行</span></span><br><span class="line">192.168.245.129:1&gt;set num 1</span><br><span class="line">"OK"</span><br><span class="line">192.168.245.129:1&gt;incr num</span><br><span class="line">"2"</span><br><span class="line">192.168.245.129:1&gt;incr num</span><br><span class="line">"3"</span><br><span class="line">192.168.245.129:1&gt;decr num</span><br><span class="line">"2"</span><br><span class="line">192.168.245.129:1&gt;decr num</span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递增递减指定值,小数不行</span></span><br><span class="line">192.168.245.129:1&gt;incrby num 4</span><br><span class="line">"6"</span><br><span class="line">192.168.245.129:1&gt;decrby num 2</span><br><span class="line">"4"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 小数不行</span></span><br><span class="line">192.168.245.129:1&gt;incrby num 1.5</span><br><span class="line">"ERR value is not an integer or out of range"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递增指定小数,貌似没有递减</span></span><br><span class="line">192.168.245.129:1&gt;incrbyfloat num 1.5</span><br><span class="line">"5.5"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定生命周期  setex key seconds value</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setex 秒</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> psetex 毫秒</span></span><br><span class="line">192.168.245.129:1&gt;setex phone2 2 1392465115</span><br><span class="line">"OK"</span><br><span class="line">192.168.245.129:1&gt;get phone2</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<ul>
<li>string在redis内部存储默认就是一个字符串，当遇到增减类操作incr,decr时会转成数值型进行计算</li>
<li>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。</li>
<li>注意：按数值进行操作的数据，如果原始数据不能转成数值，或超过了redis数值上线范围，将会报错。9223372036854775807 (java中long型数据最大值，Long.MAX_VALUE)</li>
</ul>
<h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setex key    time value</span><br><span class="line">setex userid 100   1</span><br></pre></td></tr></table></figure>

<h2 id="热点数据key命名惯例"><a href="#热点数据key命名惯例" class="headerlink" title="热点数据key命名惯例"></a>热点数据key命名惯例</h2><p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154352.png" alt=""></p>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><ul>
<li>需要的内存结构：一个存储空间保存多少个键值对数据</li>
<li>hash类型：底层使用哈希表结构实现数据存</li>
</ul>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154403.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设值/修改值  hset key filed1 value</span></span><br><span class="line">192.168.245.129:0&gt;HSET user name zhangsan</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;hset user age 38</span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取一个属性值</span></span><br><span class="line">192.168.245.129:0&gt;hget user age</span><br><span class="line">"38"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取多个属性值</span></span><br><span class="line">192.168.245.129:0&gt;hmget user age name</span><br><span class="line"> 1)  "45"</span><br><span class="line"> 2)  "zhangsan"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取一个key</span></span><br><span class="line">192.168.245.129:0&gt;hgetall user</span><br><span class="line"> 1)  "name"</span><br><span class="line"> 2)  "zhangsan"</span><br><span class="line"> 3)  "age"</span><br><span class="line"> 4)  "38"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 删除一个属性值</span></span><br><span class="line">192.168.245.129:0&gt;hdel user name</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;hgetall user</span><br><span class="line"> 1)  "age"</span><br><span class="line"> 2)  "38"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 查看有多少个属性</span></span><br><span class="line"> 192.168.245.129:0&gt;hlen user</span><br><span class="line">"3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取所有的属性</span></span><br><span class="line">192.168.245.129:0&gt;hkeys user</span><br><span class="line"> 1)  "age"</span><br><span class="line"> 2)  "name"</span><br><span class="line"> 3)  "sex"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取所有的属性值</span></span><br><span class="line">192.168.245.129:0&gt;hvals user</span><br><span class="line"> 1)  "45"</span><br><span class="line"> 2)  "zhangsan"</span><br><span class="line"> 3)  "n"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 指定属性增加指定值</span></span><br><span class="line"> 192.168.245.129:0&gt;hincrby user age 1</span><br><span class="line">"46"</span><br></pre></td></tr></table></figure>

<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分<br>需要的存储数据：一个存储空间保存多个数据，且通过数据可以体现进入顺序<br>list类型：保存多个数据，底层使用双向链表存储结构实现</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154413.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先插入huawei</span></span><br><span class="line">192.168.245.129:0&gt;lpush list1 huawei</span><br><span class="line">"1"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再插入apple</span></span><br><span class="line">192.168.245.129:0&gt;lpush list1 apple</span><br><span class="line">"2"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后插入Microsoft</span></span><br><span class="line">192.168.245.129:0&gt;lpush list1 microsoft</span><br><span class="line">"3"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从左边取</span></span><br><span class="line">192.168.245.129:0&gt;lrange list1 0 2</span><br><span class="line"> 1)  "microsoft"</span><br><span class="line"> 2)  "apple"</span><br><span class="line"> 3)  "huawei"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 一次性插入多条数据</span></span><br><span class="line">192.168.245.129:0&gt;rpush list2 a b c</span><br><span class="line">"3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  从左边取</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lrange key start stop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lindex key index 取指定索引的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> llen key 取长度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有rrange</span></span><br><span class="line">192.168.245.129:0&gt;lrange list2 0 2</span><br><span class="line"> 1)  "a"</span><br><span class="line"> 2)  "b"</span><br><span class="line"> 3)  "c"</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 从左边取的第二钟方法</span></span><br><span class="line">192.168.245.129:0&gt;lrange list2 0 -1</span><br><span class="line"> 1)  "a"</span><br><span class="line"> 2)  "b"</span><br><span class="line"> 3)  "c"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> lpop从左边删,rpop从右边删 </span></span><br><span class="line">192.168.245.129:0&gt;lpush list3 a b c</span><br><span class="line">"3"</span><br><span class="line">192.168.245.129:0&gt;lpop list3</span><br><span class="line">"c"</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 阻塞取值,从运行命令开始,如果有数据,取出来,立马返回,如果没有数据,就等指定的时间20s,有就立马返回结束,如果没有,就一直等到时间结束</span></span><br><span class="line">192.168.245.129:0&gt;blpop list4 20</span><br><span class="line"> 1)  "list4"</span><br><span class="line"> 2)  "32"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lrem key count value</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> count是删除多少个value</span></span><br><span class="line">192.168.245.129:0&gt;lpush dianzan  a b c d</span><br><span class="line">"4"</span><br><span class="line">192.168.245.129:0&gt;lrem dianzan 1 c</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;lrange dianzan 0 -1</span><br><span class="line"> 1)  "d"</span><br><span class="line"> 2)  "b"</span><br><span class="line"> 3)  "a"</span><br></pre></td></tr></table></figure>

<h2 id="业务场景-1"><a href="#业务场景-1" class="headerlink" title="业务场景"></a>业务场景</h2><p>list可以对数据进行分页操作,通常第一页的信息来自list,第二页和更多的数据通过数据库形式</p>
<p>也可以用作队列,比如日志收集</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul>
<li>list 中保存的数据都是string类型的，数据总容量式由西安的，最多232-1个元素（4294967295）</li>
<li>list具有索引的概念，但是操作数据时候通常以队列的形式进行入队出队操作，或以栈的形式进入栈出栈的操作</li>
<li>获取全部数据操作结束索引设置为-1</li>
<li>list 可以对数据进行分页操作，通过第一页的信息来自list，第2页及更多的信息通过数据库的形式加载</li>
<li>因为list在存查大量数据的时候,存储慢,查询慢,所有有了set</li>
</ul>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154424.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">192.168.245.129:0&gt;sadd users zs</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;sadd users lisi</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;sadd users ww</span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查列表</span></span><br><span class="line">192.168.245.129:0&gt;smembers users</span><br><span class="line"> 1)  "lisi"</span><br><span class="line"> 2)  "ww"</span><br><span class="line"> 3)  "zs"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 查数量</span></span><br><span class="line">192.168.245.129:0&gt;scard users</span><br><span class="line">"3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否有指定数据</span></span><br><span class="line">192.168.245.129:0&gt;sismember users ls</span><br><span class="line">"0"</span><br><span class="line">192.168.245.129:0&gt;sismember users ww</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;smembers users</span><br><span class="line"> 1)  "lisi"</span><br><span class="line"> 2)  "ww"</span><br><span class="line"> 3)  "zs"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 删除指定数据</span></span><br><span class="line">192.168.245.129:0&gt;srem users ww</span><br><span class="line">"1"</span><br><span class="line">192.168.245.129:0&gt;smembers users</span><br><span class="line"> 1)  "lisi"</span><br><span class="line"> 2)  "zs"</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 随机获取集合中指定数量的数据,获取之后,原来的队列数据不变</span></span><br><span class="line"> srandmember key count</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 随机获取集合中的某个数据并讲该数据移除集合</span></span><br><span class="line"> spop key</span><br><span class="line"> </span><br><span class="line"> --------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta"> &gt;</span><span class="bash"> sadd u1 a1</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd u1 a2</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd u1 a3</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd u2 a1</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sadd u2 a2</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 交集</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sinter u1 u2</span></span><br><span class="line">a2</span><br><span class="line">a1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 并集</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sunion u1 u2</span></span><br><span class="line">a1</span><br><span class="line">a2</span><br><span class="line">a3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 差集 (u1,u2)顺序不一样,结果不一样</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sdiff u1 u2</span></span><br><span class="line">a3</span><br></pre></td></tr></table></figure>

<h2 id="业务场景-2"><a href="#业务场景-2" class="headerlink" title="业务场景"></a>业务场景</h2><p>redis应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热点旅游线路，应用APP推荐，大V推荐等</p>
<h2 id="sort-set"><a href="#sort-set" class="headerlink" title="sort_set"></a>sort_set</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd scores 100  zhangsan</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd scores 90  lisi</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd scores 95  wangwu</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取全部数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrange scores 0 -1</span></span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhangsan</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取全部数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrange scores 0 -1 withscores</span></span><br><span class="line">lisi</span><br><span class="line">90</span><br><span class="line">wangwu</span><br><span class="line">95</span><br><span class="line">zhangsan</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向获取全部数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrevrange scores 0 -1 withscores</span></span><br><span class="line">zhangsan</span><br><span class="line">100</span><br><span class="line">wangwu</span><br><span class="line">95</span><br><span class="line">lisi</span><br><span class="line">90</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrem scores zhangsan</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrange scores 0 -1 withscores</span></span><br><span class="line">lisi</span><br><span class="line">90</span><br><span class="line">wangwu</span><br><span class="line">95</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按条件获取数据,可以用作分页</span></span><br><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT]</span><br><span class="line">zrevrangebyscore key max min [WITHSCORES]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 条件删除</span></span><br><span class="line">zremrangebyrank key start stop</span><br><span class="line">zremrangebyscore key min max</span><br><span class="line"></span><br><span class="line">-----------------------------------------排名-------------------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加模拟数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zadd movies 143 aa 97 bb 201 cc</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数据对应的索引(排名)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrank movies bb</span></span><br><span class="line">0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向获取</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> zrevrank movies bb</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> score 值获取与修改</span></span><br><span class="line">zscore key member</span><br><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure>

<h2 id="Redis-通用命令"><a href="#Redis-通用命令" class="headerlink" title="Redis 通用命令"></a>Redis 通用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-------------------------------------基本操作</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key是否存在</span></span><br><span class="line">exists key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key的类型</span></span><br><span class="line">type key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------有效期</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置指定有效期</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 秒</span></span><br><span class="line">expire key second </span><br><span class="line"><span class="meta">#</span><span class="bash"> 毫秒</span></span><br><span class="line">pexpire key milliseconds </span><br><span class="line"><span class="meta">#</span><span class="bash"> 有效期是时间戳</span></span><br><span class="line">expireat key timestamp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key的有效期</span></span><br><span class="line">ttl key</span><br><span class="line">pttl key  毫秒</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换key从时效性变成永久性</span></span><br><span class="line">persist key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------查询</span><br><span class="line"><span class="meta">#</span><span class="bash"> 具体看图片</span></span><br><span class="line">keys pattern</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------其它操作</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不判断newkey存不存在,newkey就用key的值覆盖,再改成</span></span><br><span class="line">rename key newkey</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果newkey 存在,就不能改</span></span><br><span class="line">rename key newkey</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154436.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为key改名</span></span><br><span class="line">rename key newkey //如果已经有newkey的数据，直接覆盖</span><br><span class="line">renamenx key newkey //如果已经有，则失败</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对所有key排序</span></span><br><span class="line">sort</span><br><span class="line"></span><br><span class="line">----------------------------------------------数据库操作</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换数据库</span></span><br><span class="line">select index</span><br></pre></td></tr></table></figure>

<h1 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h1><h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis安装</title>
    <url>/2020/08/14/66.Redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154450.jpeg" alt=""></p>
<a id="more"></a>
<h2 id="Docker安装单机"><a href="#Docker安装单机" class="headerlink" title="Docker安装单机"></a>Docker安装单机</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">       -p 6379:6379 \</span><br><span class="line">       --name myredis \</span><br><span class="line">       -v $PWD/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">       -v $PWD/data:/data \</span><br><span class="line">       -d redis:3.2 redis-server /etc/redis/redis.conf \</span><br><span class="line">       --restart=always \</span><br><span class="line">       --appendonly yes</span><br></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li><code>--name myredis</code> : 指定容器名称，这个最好加上，不然在看docker进程的时候会很尴尬。</li>
<li><code>-p 6699:6379</code> ： 端口映射，默认redis启动的是6379,外部端口(6699)。</li>
<li><code>-v $PWD/redis.conf:/etc/redis/redis.conf</code> ： 将主机中当前目录下的redis.conf配置文件映射。</li>
<li><code>-v $PWD/data:/data -d redis:latest</code>： 将主机中当前目录下的data挂载到容器的/data</li>
<li><code>--redis-server --appendonly yes</code> :在容器执行redis-server启动命令，并打开redis持久化配置</li>
<li><code>--restart=always</code>:自动启动</li>
<li>注意事项：<ul>
<li>如果不需要指定配置，<code>-v $PWD/redis.conf:/etc/redis/redis.conf</code> 可以不用</li>
<li>redis-server 后面的那段 <code>/etc/redis/redis.conf</code> 也可以不用。</li>
<li><code>$PWD</code> 在window系统下貌似不能用,可以用相对路径<code>/</code></li>
</ul>
</li>
</ul>
<p>客户端连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先查询到myredis容器的ip地址。</span></span><br><span class="line">docker inspect myredis | grep IP</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接到redis容器。然后就进入redis命令行了。</span></span><br><span class="line">docker run -it redis:latest redis-cli -h 192.168.42.32</span><br></pre></td></tr></table></figure>
<h2 id="源码安装单机"><a href="#源码安装单机" class="headerlink" title="源码安装单机"></a>源码安装单机</h2><h3 id="centos下安装"><a href="#centos下安装" class="headerlink" title="centos下安装"></a>centos下安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装需要的软件</span></span><br><span class="line">yum -y install gcc gcc-c++ kernel-devel make</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载redis</span></span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line">tar -zxvf redis-5.0.5.tar.gz</span><br><span class="line">cd redis-5.0.5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装redis</span></span><br><span class="line">make &amp;&amp; make instal</span><br></pre></td></tr></table></figure>
<p>注意make的时候可能会报错,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure>

<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>启动脚本 <code>redis_init_script</code> 位于位于<code>Redis</code>的 <code>/utils/</code> 目录下。</p>
<p>大致浏览下该启动脚本，发现redis习惯性用监听的端口名作为配置文件等命名，我们后面也遵循这个约定。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis服务器监听的端口</span></span><br><span class="line">REDISPORT=6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务端所处位置，在make install后默认存放与`/usr/<span class="built_in">local</span>/bin/redis-server`，如果未make install则需要修改该路径，下同。</span></span><br><span class="line">EXEC=/usr/local/bin/redis-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端位置</span></span><br><span class="line">CLIEXEC=/usr/local/bin/redis-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis的PID文件位置</span></span><br><span class="line">PIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置文件位置，需要修改</span></span><br><span class="line">CONF="/etc/redis/$&#123;REDISPORT&#125;.conf"</span><br></pre></td></tr></table></figure>

<p>根据启动脚本要求，将修改好的配置文件以端口为名复制一份到指定目录。需使用root用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/redis</span><br><span class="line">cp redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>
<p>将启动脚本复制到<code>/etc/init.d</code>目录下，本例将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp redis_init_script /etc/init.d/redisd</span><br></pre></td></tr></table></figure>
<p>设置为开机自启动<br>此处直接配置开启自启动 <code>chkconfig redisd on</code> 将报错误： <code>service redisd does not support chkconfig</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig:   2345 90 10</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description:  Redis is a persistent key-value database</span></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure>
<p>再设置即可成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置为开机自启动服务器</span></span><br><span class="line">chkconfig redisd on</span><br><span class="line"><span class="meta">#</span><span class="bash">打开服务</span></span><br><span class="line">service redisd start</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭服务</span></span><br><span class="line">service redisd stop</span><br></pre></td></tr></table></figure>
<h3 id="添加到PATH"><a href="#添加到PATH" class="headerlink" title="添加到PATH"></a>添加到PATH</h3><p>由于redis-cli命令没有设置到PATH中,每次想使用时,都需要执行find命令去找这个命令在哪里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># find &#x2F; -name redis-cli</span><br></pre></td></tr></table></figure>
<p>找到之后, 再执行命令, 这样实在太麻烦</p>
<p>解决方案:</p>
<p>将<code>redis-cli</code>命令配置到<code>PATH</code>中,这样每次使用时,就像<code>ls</code>这种命令一样不加路径执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>
<p>将<code>redis-cli</code>命令路径配置到<code>PATH</code>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH&#x3D;$PATH:$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;redis-3.2.8&#x2F;src&#x2F;</span><br></pre></td></tr></table></figure>
<p>保存之后, 使用source命令使之生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>


<h2 id="源码安装集群Redis-cluster"><a href="#源码安装集群Redis-cluster" class="headerlink" title="源码安装集群Redis-cluster"></a>源码安装集群Redis-cluster</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><p>用一台虚拟机模拟6个节点，创建出3 master、3 salve 环境。</p>
<h3 id="2-下载-解压-编译安装"><a href="#2-下载-解压-编译安装" class="headerlink" title="2.下载,解压,编译安装"></a>2.下载,解压,编译安装</h3><h3 id="3-创建节点-在worker1"><a href="#3-创建节点-在worker1" class="headerlink" title="3.创建节点,在worker1"></a>3.创建节点,在worker1</h3><p>创建文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir redis_cluster</span><br><span class="line">cd redis_cluster</span><br><span class="line">mkdir 7000</span><br><span class="line">mkdir 7001</span><br><span class="line">mkdir 7002</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7000/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7001/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7002/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7003/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7004/</span><br><span class="line">cp /usr/local/redis-5.0.5/redis.conf /usr/local/redis_cluster/7005/</span><br></pre></td></tr></table></figure>

<p>分别修改三个文件夹里的配置文件,修改如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port  7000      &#x2F;&#x2F;端口7000,7002,7003,7004,7005,7001</span><br><span class="line">bind 0.0.0.0     &#x2F;&#x2F;自己建议修改为0.0.0.0</span><br><span class="line">daemonize yes   &#x2F;&#x2F;redis后台运行</span><br><span class="line">pidfile  &#x2F;var&#x2F;run&#x2F;redis_7000.pid    &#x2F;&#x2F;pidfile文件对应7000,7001,7002</span><br><span class="line">cluster-enabled  yes    &#x2F;&#x2F;开启集群  把注释#去掉</span><br><span class="line">cluster-config-file  nodes_7000.conf   &#x2F;&#x2F;集群的配置,配置文件首次启动自动生成7000,7001,7002</span><br><span class="line">cluster-node-timeout  15000  &#x2F;&#x2F;请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  yes &#x2F;&#x2F;aof日志开启</span><br></pre></td></tr></table></figure>

<p>启动节点的redis<br><code>/usr/local/bin/redis-server</code> 这是在<code>make &amp; make install</code>生成的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/redis-server redis_cluster/7000/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7001/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7002/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7003/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7002/redis.conf</span><br><span class="line">/usr/local/bin/redis-server redis_cluster/7002/redis.conf</span><br></pre></td></tr></table></figure>

<p>检查 redis 启动情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redi</span><br><span class="line">root      61020      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7000 [cluster]</span><br><span class="line">root      61024      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7001 [cluster]</span><br><span class="line">root      61029      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7002 [cluster]</span><br><span class="line">root      61029      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7002 [cluster]</span><br><span class="line">root      61029      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7002 [cluster]</span><br><span class="line">root      61029      1  0 02:14 ?        00:00:01 redis-server 0.0.0.0:7002 [cluster]</span><br></pre></td></tr></table></figure>
<h3 id="4-再在worker2-上做相同的操作"><a href="#4-再在worker2-上做相同的操作" class="headerlink" title="4.再在worker2 上做相同的操作"></a>4.再在worker2 上做相同的操作</h3><h3 id="5-启动集群"><a href="#5-启动集群" class="headerlink" title="5.启动集群"></a>5.启动集群</h3><p>装的redis是5.x的版本,这里没有应用到<code>redis-trib.rb</code>,所以就不需要装ruby</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin</span><br><span class="line">redis-cli --cluster create 192.168.0.100:7003 192.168.0.100:7004 192.168.0.100:7005 192.168.0.179:7000 192.168.0.179:7001 192.168.0.179:7002 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p>遇到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Can I set the above configuration? (type 'yes' to accept): yes</span><br></pre></td></tr></table></figure>
<p>如数<code>yes</code></p>
<h3 id="6-校验-等运行完成"><a href="#6-校验-等运行完成" class="headerlink" title="6.校验,等运行完成"></a>6.校验,等运行完成</h3><p><code>redis-cli --cluster check 192.168.0.179:7000</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@worker1 src]# redis-cli --cluster check 192.168.0.179:7000</span><br><span class="line">192.168.0.179:7000 (27bce53b...) -&gt; 0 keys | 5462 slots | 1 slaves.</span><br><span class="line">192.168.0.100:7004 (6b0173d9...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">192.168.0.100:7003 (9f15a932...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">[OK] 0 keys in 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.0.179:7000)</span><br><span class="line">M: 27bce53bda92341ca4a5c82c2361ab99f24c0b27 192.168.0.179:7000</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: c7ebcd900fb7d9afb1980797acba45518cb7d877 192.168.0.100:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 27bce53bda92341ca4a5c82c2361ab99f24c0b27</span><br><span class="line">S: ed5256f8db1bf556a8dadbe8f2b07699507e17d9 192.168.0.179:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6b0173d925f70807a9081b7bc09bcd37be857342</span><br><span class="line">S: 758609eaea88bac25b864f2badbab2171a68089b 192.168.0.179:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9f15a9329a9d0ec5c7fcb5abbba817730f0942f9</span><br><span class="line">M: 6b0173d925f70807a9081b7bc09bcd37be857342 192.168.0.100:7004</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 9f15a9329a9d0ec5c7fcb5abbba817730f0942f9 192.168.0.100:7003</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<h3 id="7-主机上下线"><a href="#7-主机上下线" class="headerlink" title="7.主机上下线"></a>7.主机上下线</h3><h3 id="8-Cluster配置"><a href="#8-Cluster配置" class="headerlink" title="8.Cluster配置"></a>8.Cluster配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置加入cluster，成为其中的节点</span></span><br><span class="line">cluster-enabled yes|no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容</span></span><br><span class="line">cluster-config-file &lt; filename&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 节点服务响应超时时间，用于判定该节点是否下线或切换为从节点</span></span><br><span class="line">cluster-node-timeout &lt; milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> master连接的slave最小数量</span></span><br><span class="line">cluster-migration-barrier &lt; count&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-Cluster节点操作命令"><a href="#9-Cluster节点操作命令" class="headerlink" title="9.Cluster节点操作命令"></a>9.Cluster节点操作命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看集群节点信息</span></span><br><span class="line">cluster nodes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入一个从节点redis，切换其主节点</span></span><br><span class="line">cluster replication &lt; master-id&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现一个新节点，新增主节点</span></span><br><span class="line">cluster meet ip:port</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略一个没有solt的节点</span></span><br><span class="line">cluster forget</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动故障转移</span></span><br><span class="line">cluster failover</span><br></pre></td></tr></table></figure>

<h2 id="源码安装主从"><a href="#源码安装主从" class="headerlink" title="源码安装主从"></a>源码安装主从</h2><p>看着已经要过时了,不搞了</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis缓存预热,雪崩,击穿,穿透</title>
    <url>/2020/08/14/71.Redis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD,%E9%9B%AA%E5%B4%A9,%E5%87%BB%E7%A9%BF,%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195356.jpeg" alt=""></p>
<h2 id="数据存储设计"><a href="#数据存储设计" class="headerlink" title="数据存储设计"></a>数据存储设计</h2><p>Key -&gt; CRC16(Key) 相当于HashCode值—&gt;%16384</p>
<ul>
<li>将所有的存储空间计划切割成16384份，每台主机保存一部分,每份代表的使一个存储空间，不是一个key的保存空间</li>
<li>将key按照计算出的结果放到对应的存储空间</li>
</ul>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195345.png" alt=""></p>
<p>当有新的机器加入集群的时候,就会每台机器转移一些数据空间</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195405.png" alt=""></p>
<h2 id="集群内部通讯设计"><a href="#集群内部通讯设计" class="headerlink" title="集群内部通讯设计"></a>集群内部通讯设计</h2><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195422.png" alt=""></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis删除策略</title>
    <url>/2020/08/14/69.Redis%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195111.jpeg" alt=""></p>
<h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>在高请求之前，做好一系列措施，保证大量用户数量点击造成灾难。</p>
<ol>
<li>请求数量较高</li>
<li>主从之间数据吞吐量较大，数据同步操作频度较高</li>
</ol>
<h3 id="缓存预热解决方案"><a href="#缓存预热解决方案" class="headerlink" title="缓存预热解决方案"></a>缓存预热解决方案</h3><p>前置准备工作：</p>
<ol>
<li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li>
<li>利用LRU数据删除策略，构建数据留存队列<br>例如：storm与kafka配合</li>
</ol>
<p>准备工作：</p>
<ol>
<li>将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</li>
<li>利用分布式多服务器同时进行数据读取，提速数据加载过程</li>
</ol>
<p>实施：</p>
<ol>
<li>使用脚本程序固定出大数据预热过程</li>
<li>如果条件允许，使用CDN（内容分发网络），效果会更好</li>
</ol>
<p>缓存预热总结：<br>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据!</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><ol>
<li>系统平稳运行过程中，忽然数据库连接量激增</li>
<li>应用服务器无法及时请求</li>
<li>大量408，500错误页面出现</li>
<li>客户反复刷新页面获取数据</li>
<li>数据库崩溃</li>
<li>应用服务器崩溃</li>
<li>重启应用服务器无效</li>
<li>Redis服务器崩溃</li>
<li>Redis集群崩溃</li>
<li>重启数据之后再次被瞬间流量放倒</li>
</ol>
<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>简介：缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>
<ol>
<li>在一个较短的时间内，缓存中较多的key集中过期</li>
<li>此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</li>
<li>数据库同时接受到大量的请求无法即时处理</li>
<li>Redis大量请求被积压，开始出现超时现象</li>
<li>数据库流量激增，数据库崩溃</li>
<li>重启后任然面对缓存中无数据可用</li>
<li>Redis服务器资源被严重占用，Redis服务器崩溃</li>
<li>Redis集群呈现崩塌，集群瓦解</li>
<li>应用服务器无法即时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</li>
<li>应用服务器，redis，数据库全部重启，效果不理想</li>
</ol>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul>
<li>短时间范围内</li>
<li>大量key集中过期</li>
</ul>
<h3 id="解决方案（道）"><a href="#解决方案（道）" class="headerlink" title="解决方案（道）"></a>解决方案（道）</h3><ol>
<li>更多的页面静态化处理</li>
<li>构建多级缓存架构<br>Nginx缓存+redis缓存+ehcache缓存</li>
<li>检测Mysql严重耗时业务进行优化<br>对数据库的瓶颈排查：例如超时查询、耗时较高事务等</li>
<li>灾难预警机制<br>监控redis服务器性能指标<br>1、CPU占用、CPU使用率<br>2、内存容量<br>3、查询平均响应时间<br>4、线程数</li>
<li>限流、降级<br>短时间范围内习生一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐渐放开访问</li>
</ol>
<h3 id="解决方案（术）"><a href="#解决方案（术）" class="headerlink" title="解决方案（术）"></a>解决方案（术）</h3><ol>
<li>LRU与LFU切换</li>
<li>数据有效期策略调整<br>根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟<br>过期时间使用固定形式+随机值的形式，稀释集中到期的key的数量</li>
<li>超热数据使用永久key</li>
<li>定期维护（自动+人工）<br>对即将过期数据做访问量分析，确认是否演示，配合访问量统计，做热点数据的延时</li>
<li>加锁 慎用！！！！！！！</li>
</ol>
<p>总结<br>缓存雪崩式瞬间过期数量太大，导致对数据库服务器造成压力。如果能有效避免过期时间集中，可以有效解决雪崩现象的出现（约40%）。配合其他策略一起使用，并监控服务器的运行数据，根据运行巨鹿做快速调整</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195122.png" alt=""></p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="数据库服务器崩溃（2）"><a href="#数据库服务器崩溃（2）" class="headerlink" title="数据库服务器崩溃（2）"></a>数据库服务器崩溃（2）</h3><ol>
<li>系统平稳运行过程中</li>
<li>数据库连接量瞬间激增</li>
<li>Redis服务器无大量key过期</li>
<li>Redis内存平稳，无波动</li>
<li>Redis服务器CPU正常</li>
<li>数据库崩溃</li>
</ol>
<h3 id="问题排查-1"><a href="#问题排查-1" class="headerlink" title="问题排查"></a>问题排查</h3><ol>
<li>Redis中某个key过期，该key访问量巨大</li>
<li>多个数据请求从服务器直接压到Redis后，均为命中</li>
<li>Redis在短时间内发起了大量对数据库中同一个数据的访问</li>
</ol>
<p><strong>问题分析</strong></p>
<ul>
<li>单个key高热数据</li>
<li>key过期</li>
</ul>
<h3 id="解决方案（术）-1"><a href="#解决方案（术）-1" class="headerlink" title="解决方案（术）"></a>解决方案（术）</h3><ol>
<li>预先设定<br>以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时常<br>注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低趋势</li>
<li>现场调整<br>监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</li>
<li>后台刷新数据<br>启动定时任务，高峰期来临之前，刷新数据有效期，保存不丢失</li>
<li>二级缓存<br>设置不同的失效时间，保障不会被同时淘汰就行</li>
<li>加锁<br>分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！！！！！！！！</li>
</ol>
<p>总结：<br>缓存击穿就是单个高热数据过期的瞬间，数据访问较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可</p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="数据库服务器崩溃（3）"><a href="#数据库服务器崩溃（3）" class="headerlink" title="数据库服务器崩溃（3）"></a>数据库服务器崩溃（3）</h3><p>简介：一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<ol>
<li>系统平稳运行过程中</li>
<li>应用服务器流量随时间增量较大</li>
<li>Redis服务器命中率随时间逐步降低</li>
<li>Redis内存平稳，内存无压力</li>
<li>Redis服务器CPU占用激增</li>
<li>数据库服务器压力激增</li>
<li>数据库崩溃</li>
</ol>
<h3 id="问题排查-2"><a href="#问题排查-2" class="headerlink" title="问题排查"></a>问题排查</h3><ol>
<li>redis中大面积出现未命中</li>
<li>出现非正常URL访问</li>
</ol>
<p><strong>问题分析</strong></p>
<ul>
<li>获取的数据在数据库中也不存在，数据库查询未得到对应数据</li>
<li>Redis获取到null数据未进行持久化，直接返回</li>
<li>下次此类数据到达重复上述过程</li>
<li>出现黑客攻击服务器</li>
</ul>
<h3 id="解决方法（术）"><a href="#解决方法（术）" class="headerlink" title="解决方法（术）"></a>解决方法（术）</h3><ol>
<li>缓存null<br>对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高五分钟</li>
<li>白名单策略<br>提前预热各种分类数据id对应的bitmaps,id作为bitmaps的offset,相当于设置了数据白名单。当加载正常数据后放型，加载异常数据时直接拦截（效率偏低）<br>使用布隆过滤器（有关布隆过滤器的命中问题对当前状态可以忽略）</li>
<li>实时监控<br>试试监控redis命中率（业务正常范围时，通常回有一个波动值）与null数据的占比<br>非活动时间波动：通常检测3-5倍，超过5倍纳入重点排查对象<br>活动时间波动：通常检测10-50倍，超过50倍纳入重点排查对象<br>根据背书不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</li>
<li>key加密<br>问题出现后，临时启动防灾业务key,对key进行业务层传输加密服务，设定校验程序，过来的key校验<br>例如每天随机分配60个加密串，挑选2-3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问</li>
</ol>
<p><strong>总结</strong><br>缓存穿透是访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并即时报警。应对策略应该在临时预案防范方面多做文章<br>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis持久化</title>
    <url>/2020/08/14/67.Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154503.jpeg" alt=""></p>
<p>很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。</p>
<p>Redis不同于Memcached的很重一点就是，Redis支持持久化，而且支持两种不同的持久化操作。</p>
<p>Redis的一种持久化方式叫快照（snapshotting，RDB）</p>
<p>另一种方式是只追加文件（append-only file,AOF）</p>
<p>这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154511.png" alt=""></p>
<h2 id="RDB-快照"><a href="#RDB-快照" class="headerlink" title="RDB(快照)"></a>RDB(快照)</h2><p>save 会生成rdb文件</p>
<h3 id="RDB启动方式——save指令相关配置"><a href="#RDB启动方式——save指令相关配置" class="headerlink" title="RDB启动方式——save指令相关配置"></a>RDB启动方式——save指令相关配置</h3><ul>
<li>dbfilename dump.rdb<br>说明：设置本地数据库文件名，默认值为dump.rdb<br>经验：通常设置为dump-端口号.rdb,就是配置文件里配置的地址</li>
<li>dir<br>说明：设置存储.rdb文件的路径<br>经验：通常设置成存储空间较大的目录中，目录名称data</li>
<li>rdbcompression yes<br>说明：设置存储至本地数据库时是否压缩数据，默认为yes，采用LZF压缩<br>经验：通常默认为开启状态，如果设置成no，可以节省CPU运行时间，但会使存储的文件变大（巨大）</li>
<li>rdbchecksumy yes<br>说明：设置是否进行RDB文件格式的校验，该校验过程在写文件和读文件过程均进行<br>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</li>
</ul>
<p>注意：<strong>Redis是单线程的</strong>，所有命令都会在类似队列中排好队，不建议使用save指令，因为save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成位置，有可能会造成长时间阻塞，<strong>线上环境不建议使用</strong></p>
<h3 id="RDB启动方式——bgsave指令"><a href="#RDB启动方式——bgsave指令" class="headerlink" title="RDB启动方式——bgsave指令"></a>RDB启动方式——bgsave指令</h3><p>手动启动后台保存操作，但不是立即执行</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154521.png" alt=""></p>
<p>执行成功了不会在控制台输出,可以在日志中看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">58142:M 07 Aug 2020 07:23:17.355 * Starting BGSAVE for SYNC with target: disk</span><br><span class="line">58142:M 07 Aug 2020 07:23:17.355 * Background saving started by pid 58183</span><br><span class="line">58183:C 07 Aug 2020 07:23:17.357 * DB saved on disk</span><br><span class="line">58183:C 07 Aug 2020 07:23:17.357 * RDB: 0 MB of memory used by copy-on-write</span><br><span class="line">58142:M 07 Aug 2020 07:23:17.456 * Background saving terminated with success</span><br></pre></td></tr></table></figure>

<p>bgsave命令是针对save阻塞问题做的优化。Redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用</p>
<h3 id="RDB启动方式——save配置"><a href="#RDB启动方式——save配置" class="headerlink" title="RDB启动方式——save配置"></a>RDB启动方式——save配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save second changes</span><br><span class="line"></span><br><span class="line">second：监控时间范围</span><br><span class="line">changes：监控key的变化量</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save 900 1      #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class="line">save 300 10     #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class="line">save 60 10000    #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br></pre></td></tr></table></figure>

<h3 id="RDB启动方式——save配置原理"><a href="#RDB启动方式——save配置原理" class="headerlink" title="RDB启动方式——save配置原理"></a>RDB启动方式——save配置原理</h3><p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154530.png" alt=""></p>
<p><strong>注意：</strong><br>save配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的<br>save配置中对second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系<br>save配置启动后执行的是bgsave操作</p>
<h3 id="RDB启动方式——对比"><a href="#RDB启动方式——对比" class="headerlink" title="RDB启动方式——对比"></a>RDB启动方式——对比</h3><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826194906.png" alt=""></p>
<h3 id="RDB启动方式——其它启动方式"><a href="#RDB启动方式——其它启动方式" class="headerlink" title="RDB启动方式——其它启动方式"></a>RDB启动方式——其它启动方式</h3><ul>
<li>全量复制<br>在主从复制中会提到</li>
<li>服务器运行过程中重启<br>debug reload</li>
<li>关闭服务器时指定保存数据<br>shutdown save</li>
</ul>
<h3 id="RDB-优缺点"><a href="#RDB-优缺点" class="headerlink" title="RDB 优缺点"></a>RDB 优缺点</h3><h5 id="RDB优点"><a href="#RDB优点" class="headerlink" title="RDB优点"></a>RDB优点</h5><ul>
<li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li>
<li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li>
<li>RDB恢复数据的速度要比AOF快很多</li>
<li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程己气中，用于灾难恢复</li>
</ul>
<h5 id="RDB缺点"><a href="#RDB缺点" class="headerlink" title="RDB缺点"></a>RDB缺点</h5><ul>
<li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具体较大的可能性丢失数据</li>
<li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li>
<li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现个版本服务之间数据格式无法兼容现象</li>
</ul>
<h5 id="RDB存储的弊端"><a href="#RDB存储的弊端" class="headerlink" title="RDB存储的弊端"></a>RDB存储的弊端</h5><ul>
<li>存储数据量较大，效率较低——基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</li>
<li>大数据量下的IO性能较低</li>
<li>基于fork创建子进程，内存产生额外消耗</li>
<li>宕机带来的数据丢失风险</li>
</ul>
<h5 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h5><ul>
<li>不写全数据，仅记录部分数据</li>
<li>改记录数据未记录操作过程</li>
<li>对所有操作均进行记录，排除丢失数据的风险</li>
<li>这也就是AOF的引入</li>
</ul>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h5 id="AOF写数据过程"><a href="#AOF写数据过程" class="headerlink" title="AOF写数据过程"></a>AOF写数据过程</h5><p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154541.png" alt=""></p>
<h5 id="AOF写数据的三种策略"><a href="#AOF写数据的三种策略" class="headerlink" title="AOF写数据的三种策略"></a>AOF写数据的三种策略</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendfsync always  #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span><br><span class="line">appendfsync everysec #每秒钟同步一次，显示地将多个写命令同步到硬盘 **(默认的)**</span><br><span class="line">appendfsync no    #让操作系统决定何时进行同步</span><br></pre></td></tr></table></figure>

<h5 id="AOF功能开启和相关配置"><a href="#AOF功能开启和相关配置" class="headerlink" title="AOF功能开启和相关配置"></a>AOF功能开启和相关配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 是否开启APF持久化功能，默认为不开启</span></span><br><span class="line">appendonly yes|no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF写数据策略</span></span><br><span class="line">appendfsync always|everysec|no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF持久化文件名，默认文件名为appendonly.aof,建议配置为appendonly-端口号.aof</span></span><br><span class="line">appendfilename filename</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF持久化文件保存路径，与RDB持久化文件保持一致即可</span></span><br><span class="line">dir</span><br></pre></td></tr></table></figure>

<h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><p>随着命令的不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入AOF重写机制压缩文件体积，AOF文件重写是将Redis进程内的数据转换为写命令同步到新AOF文件的过程，简单说就是将同样一个数据的若干个命令执行结果转换为最终结果数据对应的指令进行记录</p>
<h6 id="AOF重写作用"><a href="#AOF重写作用" class="headerlink" title="AOF重写作用"></a>AOF重写作用</h6><ul>
<li>降低磁盘占用量，提高磁盘利用路</li>
<li>提高持久化效率，降低持久化写时间，提高IO性能</li>
<li>降低数据恢复用时，提高数据恢复效率</li>
</ul>
<h6 id="AOF重写规则"><a href="#AOF重写规则" class="headerlink" title="AOF重写规则"></a>AOF重写规则</h6><ul>
<li>进程内已超时的数据不再写入文件</li>
<li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令　<br>如del key1,hdel key2,srem key3,set key 222等</li>
<li>对统一数据的多条命令合并为一条命令<br>如 lpush list1 a ,lpush list1 b,lpush list1 c可以转化为lpush list1 a b c<br>为防止数据量过大造成客户端缓冲区溢出，对list,set,hash,set等类型，每条指令最多写入64个元素</li>
</ul>
<h6 id="重写方式"><a href="#重写方式" class="headerlink" title="重写方式"></a>重写方式</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动重写,在命令行执行,会覆盖原来的aof文件,但是文件更小</span></span><br><span class="line">bgrewriteaof</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动重写</span></span><br><span class="line">auto-aof-rewrite-min-size 		size</span><br><span class="line">auto-aof-rewrite-percentage 	percentage</span><br></pre></td></tr></table></figure>

<p>手动重写流程:</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154549.png" alt=""></p>
<p>自动重写的触发条件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自动重写触发条件设置</span></span><br><span class="line">auto-aof-rewrite-min-size</span><br><span class="line">auto-aof-rewrite-percentage percent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动重写触发对比参数（运行指令info Persistence获取具体信息）</span></span><br><span class="line">aof_current_size</span><br><span class="line">aof_base_size</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154558.png" alt=""></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154606.png" alt=""></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154616.png" alt=""></p>
<h2 id="AOF和RDB的区别"><a href="#AOF和RDB的区别" class="headerlink" title="AOF和RDB的区别"></a>AOF和RDB的区别</h2><p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20201213154626.png" alt=""></p>
<h5 id="RDB和AOF的选择之感"><a href="#RDB和AOF的选择之感" class="headerlink" title="RDB和AOF的选择之感"></a>RDB和AOF的选择之感</h5><ul>
<li>对数据非常敏感，建议使用默认的AOF持久化方案<br>AOF持久化策略使用erverysecond，每秒钟fsync一次。该策略redis任然可以保持很好的处理性能，当出现问题时，最多丢失0-1秒中的数据。<br>注意：由于AOF文件存储体积较大，且恢复数据较慢</li>
<li>数据呈现阶段有效性，建议使用RDB持久化方案<br>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人工手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案<br>注意：利用RDB实现紧凑的数据持久化会使Redis降得很低</li>
<li>综合对比</li>
</ul>
<ol>
<li>RDB与AOF得选择实际上是在做一种权衡，每种都有利弊</li>
<li>如不能承受数分钟以内得数据丢失，对业务数据非常敏感，选用AOF</li>
<li>如能承受数分钟以内数据丢失，且追求大数据集得恢复速度，选用RDB<br>灾难恢复选用RDB</li>
<li>双保险策略，同时开启RDB和AOF，重启后，Redis优先使用AOF来恢复数据，降低丢失数据的量</li>
</ol>
<h2 id="Redis-4-0-对于持久化机制的优化"><a href="#Redis-4-0-对于持久化机制的优化" class="headerlink" title="Redis 4.0 对于持久化机制的优化"></a><strong>Redis 4.0 对于持久化机制的优化</strong></h2><p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 <code>aof-use-rdb-preamble</code> 开启）。</p>
<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis事务</title>
    <url>/2020/08/14/68.Redis%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195042.jpeg" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启事务,设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</span></span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行提交事务,加入事务的命令暂时到任务队列中，并没有立即执行，只有执行<span class="built_in">exec</span>命令才开始执行</span></span><br><span class="line">exec</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消事务,终止当前事务定义，发生在multi之后，<span class="built_in">exec</span>之前</span></span><br><span class="line">discard</span><br></pre></td></tr></table></figure>

<h2 id="事务的工作流程"><a href="#事务的工作流程" class="headerlink" title="事务的工作流程"></a>事务的工作流程</h2><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195056.png" alt=""></p>
<h2 id="事务的注意事项"><a href="#事务的注意事项" class="headerlink" title="事务的注意事项"></a>事务的注意事项</h2><ul>
<li>语法错误<br>指命令书写格式有误</li>
<li>处理结果<br>如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会被执行。包括那些语法正确的命令</li>
</ul>
<hr>
<ul>
<li>运行错误<br>指命令格式正确，但是无法正常的执行。例如对list进行incr操作</li>
<li>处理结果<br>能够正确运行的命令会执行，运行错误的命令不会执行<br>注意：已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚。</li>
</ul>
<h3 id="手动进行事务回滚-基本没法用"><a href="#手动进行事务回滚-基本没法用" class="headerlink" title="手动进行事务回滚(基本没法用)"></a>手动进行事务回滚(基本没法用)</h3><ul>
<li>记录操作过程中被影响的数据之前的状态<br>单数据：string<br>多数据：hash,list,set,zset</li>
<li>设置指令恢复所有的被修改的项<br>单数据：直接set（注意周边属性，例如时效）<br>多数据：修改对应值或整体克隆复制</li>
</ul>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对key添加监视锁，在执行<span class="built_in">exec</span>前如果key发生了变化，终止事务执行</span></span><br><span class="line">watch key1 [key2…]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消对所有key的监视</span></span><br><span class="line">unwatch</span><br></pre></td></tr></table></figure>

<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加锁</span></span><br><span class="line">setnx lock-key value</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置超时时间</span></span><br><span class="line">expire lock-key second</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除锁</span></span><br><span class="line">dek lock-key</span><br></pre></td></tr></table></figure>

<ul>
<li>利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功</li>
<li>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</li>
<li>对于返回设置失败的，不具有控制权，排队或等待<br>操作完毕通过<strong>del</strong>操作释放锁</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat启动和源码启动</title>
    <url>/2020/08/20/72.Tomcat%E5%90%AF%E5%8A%A8%E5%92%8C%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="Tomcat的使用"><a href="#Tomcat的使用" class="headerlink" title="Tomcat的使用"></a>Tomcat的使用</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195959.png" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>解压之后,进入<code>BIN</code>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">打开startup.bat文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">打开shutdown.bat文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问</span></span><br><span class="line">http://localhost:8000</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195443.png" alt=""></p>
<h2 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h2><table>
<thead>
<tr>
<th>目录</th>
<th>目录下文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>/</td>
<td>存放Tomcat的启动,停止等批处理脚本文件</td>
</tr>
<tr>
<td></td>
<td>startup.bat,<br />startup.sh</td>
<td>用于win和linux下的启动脚本</td>
</tr>
<tr>
<td></td>
<td>shutdown.bat<br />shutdown.sh</td>
<td>win和linux下的停止脚本</td>
</tr>
<tr>
<td>conf</td>
<td>/</td>
<td>Tomcat的相关配置文件</td>
</tr>
<tr>
<td></td>
<td>Catalina</td>
<td>用于存放针对每个虚拟机的Context配置</td>
</tr>
<tr>
<td></td>
<td>context.xml</td>
<td>所有web应用均需加载的Context配置,如果改web应用指定了自己的context.xml,改文件被覆盖</td>
</tr>
<tr>
<td></td>
<td>catalina.properties</td>
<td>Tomcat的环境变量配置</td>
</tr>
<tr>
<td></td>
<td>catalina.policy</td>
<td>Tomcat运行的安全策略配置</td>
</tr>
<tr>
<td></td>
<td>logging.properties</td>
<td>日志配置文件,可以通过改文件修改Tomcat的日志级别以及日记路径等</td>
</tr>
<tr>
<td></td>
<td>server.xml</td>
<td>核心配置文件</td>
</tr>
<tr>
<td></td>
<td>tomcat-users.xml</td>
<td>定义Tomcat默认的用户和角色映射信息配置</td>
</tr>
<tr>
<td></td>
<td>web.xml</td>
<td>Tomcat中所有应用默认的部署描述文件,主要定义了基础的Servlet和MIME映射</td>
</tr>
<tr>
<td>lib</td>
<td>/</td>
<td>依赖包</td>
</tr>
<tr>
<td>logs</td>
<td>/</td>
<td>默认的日志存放目录</td>
</tr>
<tr>
<td>webapps</td>
<td>/</td>
<td>默认的web应用部署目录</td>
</tr>
<tr>
<td>work</td>
<td>/</td>
<td>web应用JSP代码生成和编译的临时目录</td>
</tr>
</tbody></table>
<h1 id="源码安装运行"><a href="#源码安装运行" class="headerlink" title="源码安装运行"></a>源码安装运行</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195946.png" alt=""></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.解压zip压缩包</p>
<p>2.进入解压目录，并创建一个目录，命名为home ， 并将conf、webapps目录移入home 目录中</p>
<p>3.创建pom.xml,引入tomcat依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat8.5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tomcat8.5<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Tomcat8.5<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.easymock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easymock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.使用IDEA,导入该工程</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195456.png" alt=""></p>
<p>5.配置启动环境</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195504.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面几个配置中的home,是指刚才创建的home文件夹</span></span><br><span class="line">-Dcatalina.home=home</span><br><span class="line">-Dcatalina.base=home</span><br><span class="line">-Djava.endorsed.dirs=home/endorsed</span><br><span class="line">-Djava.io.tmpdir=home/temp</span><br><span class="line">-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br><span class="line">-Djava.util.logging.config.file=home/conf/logging.properties</span><br></pre></td></tr></table></figure>

<p>6.如果编译不通过,就注释掉,本文中的Tomcat源码util.TestCookieFilter类会报错，将其注释即可</p>
<p>7.启动,访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195516.png" alt=""></p>
<p>直接启动 org.apache.catalina.startup.Bootstrap的时候没有加载JasperInitializer，从而无法编译JSP。</p>
<p>解决办法是在tomcat的源码org.apache.catalina.startup.ContextConfig中的configureStart函数中手动将JSP解析器初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">configureStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Called from StandardContext.start()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"contextConfig.start"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"contextConfig.xmlSettings"</span>,</span><br><span class="line">                    context.getName(),</span><br><span class="line">                    Boolean.valueOf(context.getXmlValidation()),</span><br><span class="line">                    Boolean.valueOf(context.getXmlNamespaceAware())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        webConfig();</span><br><span class="line"></span><br><span class="line">    	<span class="comment">// 这一行就是新增加的</span></span><br><span class="line">        context.addServletContainerInitializer(<span class="keyword">new</span> JasperInitializer(), <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!context.getIgnoreAnnotations()) &#123;</span><br><span class="line">            applicationAnnotationsConfig();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            validateSecurityRoles();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Configure an authenticator if we need one</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            authenticatorConfig();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump the contents of this pipeline if requested</span></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Pipeline Configuration:"</span>);</span><br><span class="line">            Pipeline pipeline = context.getPipeline();</span><br><span class="line">            Valve valves[] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (pipeline != <span class="keyword">null</span>) &#123;</span><br><span class="line">                valves = pipeline.getValves();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (valves != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valves.length; i++) &#123;</span><br><span class="line">                    log.debug(<span class="string">"  "</span> + valves[i].getClass().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"======================"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make our application available if no problems were encountered</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            context.setConfigured(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"contextConfig.unavailable"</span>));</span><br><span class="line">            context.setConfigured(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>8.再启动,就能看到首页了</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat框架介绍</title>
    <url>/2020/08/20/73.Tomcat%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Tomcat架构"><a href="#Tomcat架构" class="headerlink" title="Tomcat架构"></a>Tomcat架构</h1><h2 id="Http请求处理"><a href="#Http请求处理" class="headerlink" title="Http请求处理"></a>Http请求处理</h2><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195916.png" alt=""></p>
<p>图1,表示HTTP服务器直接调用具体业务类，它们是紧耦合的。<br>图2,HTTP服务器不直接调用业务类，而是把请求交给容器来处理，容器通过Servlet接口调用业务类。</p>
<p>因此Servlet接口和Servlet容器的出现，达到了HTTP服务器与业务类解耦的目的,Tomcat按照Servlet规范的要求实现了Servlet容器，同时它们也具有HTTP服务器的功能。</p>
<p>作为Java程序员，如果我们要实现新的业务功能，只需要实现一个Servlet，并把它注册到Tomcat（Servlet容器）中，剩下的事情就由Tomcat帮我们处理了。</p>
<h2 id="Servlet容器工作流程"><a href="#Servlet容器工作流程" class="headerlink" title="Servlet容器工作流程"></a>Servlet容器工作流程</h2><p>为了解耦，HTTP服务器不直接调用Servlet，而是把请求交给Servlet容器来处理</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195908.png" alt=""></p>
<h2 id="Tomcat整体架构"><a href="#Tomcat整体架构" class="headerlink" title="Tomcat整体架构"></a>Tomcat整体架构</h2><p>我们知道如果要设计一个系统，首先是要了解需求，我们已经了解了Tomcat要实现两个核心功能：<br>1） 处理Socket连接，负责网络字节流与Request和Response对象的转化。<br>2） 加载和管理Servlet，以及具体处理Request请求。<br>因此Tomcat设计了两个核心组件连接器（Connector）和容器（Container）来分别做这两件事情。连接器负责对外交流，容器负责内部处理。</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195900.png" alt=""></p>
<h3 id="连接器-Coyote"><a href="#连接器-Coyote" class="headerlink" title="连接器 - Coyote"></a>连接器 - Coyote</h3><h4 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h4><p>Coyote 是Tomcat的连接器框架的名称 , 是Tomcat服务器提供的供客户端访问的外部接口。</p>
<p>客户端通过Coyote与服务器建立连接、发送请求并接受响应 。</p>
<p>Coyote 封装了底层的网络通信（Socket 请求及响应处理），为Catalina 容器提供了统一的接口，使Catalina 容器与具体的请求协议及IO操作方式完全解耦。</p>
<p>Coyote 将Socket 输入转换封装为 Request 对象，交由Catalina 容器进行处理，处理请求完成后, Catalina 通过Coyote 提供的Response 对象将结果写入输出流 。</p>
<p>Coyote 作为独立的模块，只负责具体协议和IO的相关操作， 与Servlet 规范实现没有直接关系，因此即便是 Request 和 Response 对象也并未实现Servlet规范对应的接口， 而是在Catalina 中将他们进一步封装为ServletRequest 和 ServletResponse </p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195853.png" alt=""></p>
<h4 id="IO-模型与协议"><a href="#IO-模型与协议" class="headerlink" title="IO 模型与协议"></a>IO 模型与协议</h4><p>在Coyote中 ， Tomcat支持的多种I/O模型和应用层协议，具体包含哪些IO模型和应用层协议，请看下表：<br>Tomcat 支持的IO模型（自8.5/9.0 版本起，Tomcat 移除了 对 BIO 的支持）：</p>
<table>
<thead>
<tr>
<th>IO 模型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>NIO</td>
<td>非阻塞I/O，采用Java NIO类库实现</td>
</tr>
<tr>
<td>NIO2</td>
<td>异步I/O，采用JDK 7最新的NIO2类库实现。</td>
</tr>
<tr>
<td>APR</td>
<td>采用Apache可移植运行库实现，是C/C++编写的本地库。如果选择该方<br/>案，需要单独安装APR库。</td>
</tr>
</tbody></table>
<p>Tomcat 支持的应用层协议 ：<br>| IO 模型  | 描述                                                         |<br>| ——– | ———————————————————— |<br>| HTTP/1.1 | 这是大部分Web应用采用的访问协议。                            |<br>| AJP      | 用于和Web服务器集成（如Apache），以实现对静态资源的优化以及<br/>集群部署，当前支持AJP/1.3。 |<br>| HTTP/2   | HTTP 2.0大幅度的提升了Web性能。下一代HTTP协议 ， 自8.5以及9.0<br/>版本之后支持。 |</p>
<p>在 8.0 之前 ， Tomcat 默认采用的I/O方式为 BIO ， 之后改为 NIO。 无论 NIO、NIO2还是 APR， 在性能方面均优于以往的BIO。 如果采用APR， 甚至可以达到 Apache HTTPServer 的影响性能。</p>
<h4 id="连接器组件"><a href="#连接器组件" class="headerlink" title="连接器组件"></a>连接器组件</h4><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195845.png" alt=""></p>
<p>连接器中的各个组件的作用如下：</p>
<h5 id="EndPoint"><a href="#EndPoint" class="headerlink" title="EndPoint"></a>EndPoint</h5><p>1） EndPoint ： Coyote 通信端点，即通信监听的接口，是具体Socket接收和发送处理器，是对传输层的抽象，因此EndPoint用来实现TCP/IP协议的。</p>
<p>2） Tomcat 并没有EndPoint 接口，而是提供了一个抽象类AbstractEndpoint ， 里面定义了两个内部类：Acceptor和SocketProcessor。</p>
<ul>
<li><p>Acceptor用于监听Socket连接请求。</p>
</li>
<li><p>SocketProcessor用于处理接收到的Socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫作执行器(Executor)</p>
</li>
</ul>
<h5 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h5><p>Processor ： Coyote 协议处理接口 ，Processor接收来自EndPoint的Socket，读取字节流解析成Tomcat Request和Response对象，并通过Adapter将其提交到容器处理</p>
<h5 id="ProtocolHandler"><a href="#ProtocolHandler" class="headerlink" title="ProtocolHandler"></a>ProtocolHandler</h5><p>ProtocolHandler ： Coyote 协议接口， 通过Endpoint 和 Processor ， 实现针对具体协议的处理能力。</p>
<p>Tomcat 按照协议和I/O 提供了6个实现类 ： AjpNioProtocol ，AjpAprProtocol， AjpNio2Protocol ， Http11NioProtocol ，Http11Nio2Protocol ，Http11AprProtocol。</p>
<p>我们在配置tomcat/conf/server.xml 时 ， 至少要指定具体的ProtocolHandler , 当然也可以指定协议名称 ， 如 ： HTTP/1.1 </p>
<h5 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h5><p>由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来“存放”这些请求信息。ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是这个Request对象不是标准的ServletRequest，也就意味着，不能用Tomcat Request作为参数来调用容器。</p>
<p>Tomcat设计者的解决方案是引入CoyoteAdapter，这是适配器模式的经典运用，连接器调用CoyoteAdapter的Sevice方法，传入的是TomcatRequest对象，CoyoteAdapter负责将Tomcat Request转成ServletRequest，再调用容器的Service方法</p>
<h3 id="Container结构"><a href="#Container结构" class="headerlink" title="Container结构"></a>Container结构</h3><p>Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器不是平行关系，而是父子关系。， Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195838.png" alt=""></p>
<table>
<thead>
<tr>
<th>容器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Engine</td>
<td>标识整个Catalina的servlet引擎,用来管理多个虚拟站点,一个Service只能有一个Engine,但是可以有多个Host</td>
</tr>
<tr>
<td>Host</td>
<td>一个虚拟主机,或者说一个站点,可以给Tomcat配置多个虚拟主机地址,而一个虚拟主机下可包含多个Context</td>
</tr>
<tr>
<td>Context</td>
<td>表示一个Web应用程序,一个Context包含多个Wrapper</td>
</tr>
<tr>
<td>Wrapper</td>
<td>一个Wrapper标识一个Servlet</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span>&gt;</span><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性。这里单容器对象指的是最底层的Wrapper，组合容器对象指的是上面的Context、Host或者Engine。</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195532.png" alt=""></p>
<h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195540.png" alt=""></p>
<p>1.启动tomcat ， 需要调用 bin/startup.bat (在linux 目录下 , 需要调用 bin/startup.sh) 在startup.bat 脚本中, 调用了catalina.bat。</p>
<p>2.在catalina.bat 脚本文件中，调用了BootStrap 中的main方法。</p>
<p>3.在BootStrap 的main 方法中调用了 init 方法 ， 来创建Catalina 及 初始化类加载器。</p>
<p>4.在BootStrap 的main 方法中调用了 load 方法 ， 在其中又调用了Catalina的load方法。</p>
<p>5.在Catalina 的load 方法中 , 需要进行一些初始化的工作, 并需要构造Digester 对象, 用于解析 XML。<br>6.然后在调用后续组件的初始化操作 。。。加载Tomcat的配置文件，初始化容器组件 ，监听对应的端口号， 准备接受客户端请求</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群</title>
    <url>/2020/08/14/70.Redis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195134.jpeg" alt=""></p>
<h2 id="数据存储设计"><a href="#数据存储设计" class="headerlink" title="数据存储设计"></a>数据存储设计</h2><p>Key -&gt; CRC16(Key) 相当于HashCode值—&gt;%16384</p>
<ul>
<li>将所有的存储空间计划切割成16384份，每台主机保存一部分,每份代表的使一个存储空间，不是一个key的保存空间</li>
<li>将key按照计算出的结果放到对应的存储空间</li>
</ul>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195145.png" alt=""></p>
<p>当有新的机器加入集群的时候,就会每台机器转移一些数据空间</p>
<p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195159.png" alt=""></p>
<h2 id="集群内部通讯设计"><a href="#集群内部通讯设计" class="headerlink" title="集群内部通讯设计"></a>集群内部通讯设计</h2><p><img src="https://raw.githubusercontent.com/YangAnLin/images/master/20200826195332.png" alt=""></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot整合Redis</title>
    <url>/2021/01/09/76.SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    <content><![CDATA[<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>redis-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- redis序列化用的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>redis配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Standard Redis configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这样配置,功能相当于</span></span><br><span class="line"><span class="comment">     * private StringRedisTemplate stringRedisTemplate;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public RedisTemplate&lt;Object, Object&gt; redisTemplateString(RedisConnectionFactory redisConnectionFactory) &#123;</span></span><br><span class="line"><span class="comment">//        RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        redisTemplate.setConnectionFactory(redisConnectionFactory);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 设置value的序列化规则和 key的序列化规则</span></span><br><span class="line"><span class="comment">//        redisTemplate.setKeySerializer(new StringRedisSerializer());</span></span><br><span class="line"><span class="comment">//        redisTemplate.setValueSerializer(new StringRedisSerializer());</span></span><br><span class="line"><span class="comment">//        redisTemplate.afterPropertiesSet();</span></span><br><span class="line"><span class="comment">//        return redisTemplate;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在界面工具上看,这个会序列化两次,会多了反斜杠</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置value的序列化规则和 key的序列化规则</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单机</span></span><br><span class="line"><span class="comment">#spring.redis.host=192.168.0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群</span></span><br><span class="line"><span class="meta">spring.redis.cluster.nodes</span>=<span class="string">192.168.0.6:6379,192.168.0.7:6379,192.168.0.8:6379,192.168.0.8:6379,192.168.0.10:6379,192.168.0.11:6379</span></span><br></pre></td></tr></table></figure>

<p>User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.redisspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单测试使用springboot集成redis设置值</span></span><br><span class="line"><span class="comment"> * 1.如果只是用字符串类型,可以直接使用StringRedisTemplate,这个是框架已经定义好的了</span></span><br><span class="line"><span class="comment"> * 2.如果使用RedisTemplate,需要自定义Config</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * value,直接设置一个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">11</span>);</span><br><span class="line">        user.setName(<span class="string">"anthony"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"setObj"</span>,user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * value,对象转成字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObjStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">11</span>);</span><br><span class="line">        user.setName(<span class="string">"anthony"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"setObjStr"</span>, JSONUtil.parse(user).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * value,对象转成字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObjStringredistemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">11</span>);</span><br><span class="line">        user.setName(<span class="string">"anthony"</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">"setObjStringredistemplate"</span>, JSONUtil.parse(user).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行三个测试方法,会有三种测试结果</p>
<p>第一种:序列化的时候,会带上实体类的包路径,如果再<code>get()</code>的时候,在微服务可能会报错</p>
<p>第二种:序列化的时候,会序列化两次,因为redis配置文件<code>redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</code>这里又序列化了一次,所有会看到反斜杠,很不舒服</p>
<p>第三种:才是我想要的结果,只需要序列化一次,而且json可以被redis界面工具识别</p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20210109160232.png" alt="image-20210109160230915"></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20210109160305.png" alt="image-20210109160304331"></p>
<p><img src="https://blog-anthony.s3-ap-northeast-1.amazonaws.com/blog/copy_20210109160323.png" alt="image-20210109160322272"></p>
<p>StringRedisTemplate</p>
<p>说下<code>StringRedisTemplate</code>这个类,只能对key=String，value=String的键值对进行操作，RedisTemplate可以对任何类型的key-value键值对操作。</p>
<p>如果在项目中通常都是字符串操作,通常就这个类就已经够用了</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat初始化流程</title>
    <url>/2020/08/20/74.Tomcat%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="初始化init-方法"><a href="#初始化init-方法" class="headerlink" title="初始化init()方法"></a>初始化init()方法</h2><p>Bootstrap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Don't set daemon until init() has completed</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 初始化ClassLoader</span></span><br><span class="line">                bootstrap.init();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                handleThrowable(t);</span><br><span class="line">                t.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            daemon = bootstrap;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// When running as a service the call to stop will be on a new</span></span><br><span class="line">            <span class="comment">// thread so make sure the correct class loader is used to prevent</span></span><br><span class="line">            <span class="comment">// a range of class not found exceptions.</span></span><br><span class="line">            Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String command = <span class="string">"start"</span>;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                command = args[args.length - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</span><br><span class="line">                <span class="comment">//  用反射,创建Catalina对象</span></span><br><span class="line">                daemon.load(args);</span><br><span class="line">                daemon.start();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</span><br><span class="line">                daemon.stop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</span><br><span class="line">                daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                daemon.start();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</span><br><span class="line">                daemon.stopServer(args);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// Unwrap the Exception for clearer error reporting</span></span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</span><br><span class="line">                    t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Catalina的load()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Load using arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arguments(args)) &#123;</span><br><span class="line">            load();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start a new server instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loaded) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    loaded = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">    initDirs();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Before digester - it may be needed</span></span><br><span class="line">    initNaming();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create and execute our Digester</span></span><br><span class="line">    Digester digester = createStartDigester();</span><br><span class="line"></span><br><span class="line">    InputSource inputSource = <span class="keyword">null</span>;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    File file = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file = configFile();</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            inputSource = <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(<span class="string">"catalina.configFail"</span>, file), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream = getClass().getClassLoader()</span><br><span class="line">                    .getResourceAsStream(getConfigFile());</span><br><span class="line">                inputSource = <span class="keyword">new</span> InputSource</span><br><span class="line">                    (getClass().getClassLoader()</span><br><span class="line">                     .getResource(getConfigFile()).toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</span><br><span class="line">                                           getConfigFile()), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This should be included in catalina.jar</span></span><br><span class="line">        <span class="comment">// Alternative: don't bother with xml, just create it manually.</span></span><br><span class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream = getClass().getClassLoader()</span><br><span class="line">                    .getResourceAsStream(<span class="string">"server-embed.xml"</span>);</span><br><span class="line">                inputSource = <span class="keyword">new</span> InputSource</span><br><span class="line">                    (getClass().getClassLoader()</span><br><span class="line">                     .getResource(<span class="string">"server-embed.xml"</span>).toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</span><br><span class="line">                                           <span class="string">"server-embed.xml"</span>), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略很多代码</span></span><br><span class="line"></span><br><span class="line">    getServer().setCatalina(<span class="keyword">this</span>);</span><br><span class="line">    getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class="line">    getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stream redirection</span></span><br><span class="line">    initStreams();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the new server</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用server的init方法</span></span><br><span class="line">        getServer().init();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.Error(e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">"Catalina.start"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</span><br><span class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(<span class="string">"Initialization processed in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LifecycleBase,因为用了模板设计模式,这里都是各个实现类的公共方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 调用各个实现类的initInternal()</span></span><br><span class="line">        initInternal();</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                sm.getString(<span class="string">"lifecycleBase.initFail"</span>,toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardServer是Server的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略很多代码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Initialize our defined Services</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 调用service的init方法,这里看到,一个server可以有多个service</span></span><br><span class="line">            services[i].init();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>然后还是会调用LifecycleBase的initInternal()方法,下面就不再写了,直接到实现类</p>
<p>StandardService</p>
<p>这里会有三个组件会被初始化</p>
<p>首先是Engine组件</p>
<p>然后是Executor(线程池)组件</p>
<p>最后是Connector组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 初始化Engine组件</span></span><br><span class="line">            engine.init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize any Executors</span></span><br><span class="line">        <span class="keyword">for</span> (Executor executor : findExecutors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> JmxEnabled) &#123;</span><br><span class="line">                ((JmxEnabled) executor).setDomain(getDomain());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 初始化Executor(线程池)组件</span></span><br><span class="line">            executor.init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize mapper listener</span></span><br><span class="line">        mapperListener.init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize our defined Connectors</span></span><br><span class="line">        <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Connector connector : connectors) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Connector组件</span></span><br><span class="line">                    connector.init();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    String message = sm.getString(</span><br><span class="line">                            <span class="string">"standardService.connector.initFailed"</span>, connector);</span><br><span class="line">                    log.error(message, e);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span>))</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>先看初始化Engine组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="comment">// Ensure that a Realm is present before any attempt is made to start</span></span><br><span class="line">    <span class="comment">// one. This will create the default NullRealm if necessary.</span></span><br><span class="line">    getRealm();</span><br><span class="line">    <span class="keyword">super</span>.initInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这边 Tomcat 的 init 流程已经 OK 了, 至于 StandardHost, 则在 StandardHost.start() 方法触发的时候先调用其 initInternal, 再调用其 startInternal()</p>
<p>初始化线程池就不看了</p>
<p>最后看初始化Connector组件,Connector.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建适配器</span></span><br><span class="line">        adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);</span><br><span class="line">        protocolHandler.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure parseBodyMethodsSet has a default</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == parseBodyMethodsSet) &#123;</span><br><span class="line">            setParseBodyMethods(getParseBodyMethods());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isAprAvailable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">"coyoteConnector.protocolHandlerNoApr"</span>,</span><br><span class="line">                    getProtocolHandlerClassName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (AprLifecycleListener.isAprAvailable() &amp;&amp; AprLifecycleListener.getUseOpenSSL() &amp;&amp;</span><br><span class="line">                protocolHandler <span class="keyword">instanceof</span> AbstractHttp11JsseProtocol) &#123;</span><br><span class="line">            AbstractHttp11JsseProtocol&lt;?&gt; jsseProtocolHandler =</span><br><span class="line">                    (AbstractHttp11JsseProtocol&lt;?&gt;) protocolHandler;</span><br><span class="line">            <span class="keyword">if</span> (jsseProtocolHandler.isSSLEnabled() &amp;&amp;</span><br><span class="line">                    jsseProtocolHandler.getSslImplementationName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// OpenSSL is compatible with the JSSE configuration, so use it if APR is available</span></span><br><span class="line">                jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化protocolHandler</span></span><br><span class="line">            protocolHandler.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                    sm.getString(<span class="string">"coyoteConnector.protocolHandlerInitializationFailed"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>AbstractHttp11Protocol</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (UpgradeProtocol upgradeProtocol : upgradeProtocols) &#123;</span><br><span class="line">        configureUpgradeProtocol(upgradeProtocol);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用父类-AbstractProtocol的init方法</span></span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractProtocol</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.init"</span>, getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Component not pre-registered so register it</span></span><br><span class="line">        oname = createObjectName();</span><br><span class="line">        <span class="keyword">if</span> (oname != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略很多代码</span></span><br><span class="line"></span><br><span class="line">    String endpointName = getName();</span><br><span class="line">    endpoint.setName(endpointName.substring(<span class="number">1</span>, endpointName.length()-<span class="number">1</span>));</span><br><span class="line">    endpoint.setDomain(domain);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建endpoint</span></span><br><span class="line">    endpoint.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractJsseEndpoint</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    testServerCipherSuitesOrderSupport();</span><br><span class="line">    <span class="comment">// 调用父类AbstractEndpoint的init方法</span></span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractEndpoint</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindOnInit) &#123;</span><br><span class="line">        <span class="comment">// 熟悉的代码,socket的绑定</span></span><br><span class="line">        bind();</span><br><span class="line">        bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略很多代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NioEndpoint</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!getUseInheritedChannel()) &#123;</span><br><span class="line">        <span class="comment">// socker绑定端口</span></span><br><span class="line">        serverSock = ServerSocketChannel.open();</span><br><span class="line">        socketProperties.setProperties(serverSock.socket());</span><br><span class="line">        InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</span><br><span class="line">        serverSock.socket().bind(addr,getAcceptCount());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Retrieve the channel provided by the OS</span></span><br><span class="line">        Channel ic = System.inheritedChannel();</span><br><span class="line">        <span class="keyword">if</span> (ic <span class="keyword">instanceof</span> ServerSocketChannel) &#123;</span><br><span class="line">            serverSock = (ServerSocketChannel) ic;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (serverSock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">"endpoint.init.bind.inherited"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize thread count defaults for acceptor, poller</span></span><br><span class="line">    <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></span><br><span class="line">        acceptorThreadCount = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//minimum one poller thread</span></span><br><span class="line">        pollerThreadCount = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setStopLatch(<span class="keyword">new</span> CountDownLatch(pollerThreadCount));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize SSL if needed</span></span><br><span class="line">    initialiseSsl();</span><br><span class="line"></span><br><span class="line">    selectorPool.open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化start-方法"><a href="#初始化start-方法" class="headerlink" title="初始化start()方法"></a>初始化start()方法</h2><p>BootStrap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Don't set daemon until init() has completed</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bootstrap.init();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                handleThrowable(t);</span><br><span class="line">                t.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            daemon = bootstrap;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// When running as a service the call to stop will be on a new</span></span><br><span class="line">            <span class="comment">// thread so make sure the correct class loader is used to prevent</span></span><br><span class="line">            <span class="comment">// a range of class not found exceptions.</span></span><br><span class="line">            Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String command = <span class="string">"start"</span>;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                command = args[args.length - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                daemon.start();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</span><br><span class="line">                args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</span><br><span class="line">                daemon.stop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</span><br><span class="line">                daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// init流程</span></span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="comment">// start流程</span></span><br><span class="line">                daemon.start();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</span><br><span class="line">                daemon.stopServer(args);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</span><br><span class="line">                daemon.load(args);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// Unwrap the Exception for clearer error reporting</span></span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</span><br><span class="line">                    t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( catalinaDaemon==<span class="keyword">null</span> ) init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射,调用Catalina的start方法</span></span><br><span class="line">        Method method = catalinaDaemon.getClass().getMethod(<span class="string">"start"</span>, (Class [] )<span class="keyword">null</span>);</span><br><span class="line">        method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Catalina</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        load();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log.fatal(<span class="string">"Cannot start server. Server instance is not configured."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the new server</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用这里</span></span><br><span class="line">        getServer().start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">        log.fatal(sm.getString(<span class="string">"catalina.serverStartFail"</span>), e);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getServer().destroy();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</span><br><span class="line">            log.debug(<span class="string">"destroy() failed for failed Server "</span>, e1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LifecycleBase,这里用的也是模板方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setStateInternal(LifecycleState.STARTING_PREP, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 调用server的start方法</span></span><br><span class="line">        startInternal();</span><br><span class="line">        <span class="keyword">if</span> (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">            <span class="comment">// This is a 'controlled' failure. The component put itself into the</span></span><br><span class="line">            <span class="comment">// FAILED state so call stop() to complete the clean-up.</span></span><br><span class="line">            stop();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(LifecycleState.STARTING)) &#123;</span><br><span class="line">            <span class="comment">// Shouldn't be necessary but acts as a check that sub-classes are</span></span><br><span class="line">            <span class="comment">// doing what they are supposed to.</span></span><br><span class="line">            invalidTransition(Lifecycle.AFTER_START_EVENT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setStateInternal(LifecycleState.STARTED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// This is an 'uncontrolled' failure so put the component into the</span></span><br><span class="line">        <span class="comment">// FAILED state and throw an exception.</span></span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">"lifecycleBase.startFail"</span>, toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Services</span></span><br><span class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 调用service的start方法</span></span><br><span class="line">            services[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后又会调用LifecycleBase的start方法,这里就不重复写了</p>
<p>StandardService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 省略代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Container first</span></span><br><span class="line">    <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (engine) &#123;</span><br><span class="line">            <span class="comment">// 调用engine的start方法</span></span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (executors) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Executor executor: executors) &#123;</span><br><span class="line">            <span class="comment">// 启动线程池</span></span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapperListener.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Connectors second</span></span><br><span class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Connector connector: connectors) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// If it has already failed, don't try and start it</span></span><br><span class="line">                <span class="keyword">if</span> (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                    <span class="comment">// 调用连接器的start方法</span></span><br><span class="line">                    connector.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                    <span class="string">"standardService.connector.startFailed"</span>,</span><br><span class="line">                    connector), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看先engine.start();</p>
<p>StandardEngine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Log our server identification information</span></span><br><span class="line">    <span class="keyword">if</span>(log.isInfoEnabled())</span><br><span class="line">        log.info( <span class="string">"Starting Servlet Engine: "</span> + ServerInfo.getServerInfo());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Standard container startup</span></span><br><span class="line">    <span class="keyword">super</span>.startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardHost</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用context的start方法</span></span><br><span class="line">    <span class="keyword">super</span>.startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="comment">// 调用到这里,这里的start就结束了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看connector.start();</p>
<p>Connector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate settings before starting</span></span><br><span class="line">    <span class="keyword">if</span> (getPort() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(</span><br><span class="line">            <span class="string">"coyoteConnector.invalidPort"</span>, Integer.valueOf(getPort())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用AbstractProtocol的start方法</span></span><br><span class="line">        protocolHandler.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">            sm.getString(<span class="string">"coyoteConnector.protocolHandlerStartFailed"</span>), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractProtocol</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.start"</span>, getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 AbstractEndpoint的start方法</span></span><br><span class="line">    endpoint.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start async timeout thread</span></span><br><span class="line">    asyncTimeout = <span class="keyword">new</span> AsyncTimeout();</span><br><span class="line">    Thread timeoutThread = <span class="keyword">new</span> Thread(asyncTimeout, getNameInternal() + <span class="string">"-AsyncTimeout"</span>);</span><br><span class="line">    <span class="keyword">int</span> priority = endpoint.getThreadPriority();</span><br><span class="line">    <span class="keyword">if</span> (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">        priority = Thread.NORM_PRIORITY;</span><br><span class="line">    &#125;</span><br><span class="line">    timeoutThread.setPriority(priority);</span><br><span class="line">    timeoutThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    timeoutThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractEndpoint</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">        <span class="comment">// 绑定socket</span></span><br><span class="line">        bind();</span><br><span class="line">        bindState = BindState.BOUND_ON_START;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求下一步</span></span><br><span class="line">    startInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NioEndpoint</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        paused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                                                 socketProperties.getProcessorCache());</span><br><span class="line">        eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                                             socketProperties.getEventCache());</span><br><span class="line">        nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                                              socketProperties.getBufferPool());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create worker collection</span></span><br><span class="line">        <span class="keyword">if</span> ( getExecutor() == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start poller threads</span></span><br><span class="line">        pollers = <span class="keyword">new</span> Poller[getPollerThreadCount()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pollers.length; i++) &#123;</span><br><span class="line">            pollers[i] = <span class="keyword">new</span> Poller();</span><br><span class="line">            Thread pollerThread = <span class="keyword">new</span> Thread(pollers[i], getName() + <span class="string">"-ClientPoller-"</span>+i);</span><br><span class="line">            pollerThread.setPriority(threadPriority);</span><br><span class="line">            pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            pollerThread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动socket</span></span><br><span class="line">        startAcceptorThreads();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startAcceptorThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = getAcceptorThreadCount();</span><br><span class="line">    acceptors = <span class="keyword">new</span> Acceptor[count];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建接收器</span></span><br><span class="line">        acceptors[i] = createAcceptor();</span><br><span class="line">        String threadName = getName() + <span class="string">"-Acceptor-"</span> + i;</span><br><span class="line">        acceptors[i].setThreadName(threadName);</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(acceptors[i], threadName);</span><br><span class="line">        t.setPriority(getAcceptorThreadPriority());</span><br><span class="line">        t.setDaemon(getDaemon());</span><br><span class="line">        <span class="comment">// 启动,调用run方法</span></span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Acceptor</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span>.<span class="title">Acceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Loop until we receive a shutdown command</span></span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Loop if endpoint is paused</span></span><br><span class="line">            <span class="keyword">while</span> (paused &amp;&amp; running) &#123;</span><br><span class="line">                state = AcceptorState.PAUSED;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            state = AcceptorState.RUNNING;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//if we have reached max connections, wait</span></span><br><span class="line">                countUpOrAwaitConnection();</span><br><span class="line"></span><br><span class="line">                SocketChannel socket = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Accept the next incoming connection from the server</span></span><br><span class="line">                    <span class="comment">// socket</span></span><br><span class="line">                    <span class="comment">// 这里是重点</span></span><br><span class="line">                    socket = serverSock.accept();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                    <span class="comment">// We didn't get a socket</span></span><br><span class="line">                    countDownConnection();</span><br><span class="line">                    <span class="keyword">if</span> (running) &#123;</span><br><span class="line">                        <span class="comment">// Introduce delay if necessary</span></span><br><span class="line">                        errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                        <span class="comment">// re-throw</span></span><br><span class="line">                        <span class="keyword">throw</span> ioe;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Successful accept, reset the error delay</span></span><br><span class="line">                errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Configure the socket</span></span><br><span class="line">                <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">                    <span class="comment">// setSocketOptions() will hand the socket off to</span></span><br><span class="line">                    <span class="comment">// an appropriate processor if successful</span></span><br><span class="line">                    <span class="keyword">if</span> (!setSocketOptions(socket)) &#123;</span><br><span class="line">                        closeSocket(socket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    closeSocket(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(<span class="string">"endpoint.accept.fail"</span>), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state = AcceptorState.ENDED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>到这里,Tomcat启动流程就已经结束了</p>
<p>上面的代码,涉及到模板设计模式,要不看的不太明白,就先学下,看看例子,体会下思想,主要是这里的是公共的代码,放到父类,子类只需要实现initInternal()这个方法就行</p>
<p>使用的时候,我觉得有点像aop,哈哈哈</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public final synchronized <span class="keyword">void</span> init() throws LifecycleException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 调用各个实现类的initInternal()</span></span><br><span class="line">        initInternal();</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                sm.getString(<span class="string">"lifecycleBase.initFail"</span>,toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat请求处理流程</title>
    <url>/2020/08/21/75.Tomcat%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><p>先创建个web项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>bbsServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.BBSServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>bbsServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/bbs<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BBSServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====================get==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====================post==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>build下,把生成的代码,放到源码的webapps目录下</p>
<p>NioEndpoint.Acceptor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Acceptor</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span>.<span class="title">Acceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Loop until we receive a shutdown command</span></span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 省略代码</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//if we have reached max connections, wait</span></span><br><span class="line">                countUpOrAwaitConnection();</span><br><span class="line"></span><br><span class="line">                SocketChannel socket = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Accept the next incoming connection from the server</span></span><br><span class="line">                    <span class="comment">// socket</span></span><br><span class="line">                    <span class="comment">// 当有请求的时候,首先在这里打断点,这里会接受到请求</span></span><br><span class="line">                    socket = serverSock.accept();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                    <span class="comment">// We didn't get a socket</span></span><br><span class="line">                    countDownConnection();</span><br><span class="line">                    <span class="keyword">if</span> (running) &#123;</span><br><span class="line">                        <span class="comment">// Introduce delay if necessary</span></span><br><span class="line">                        errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                        <span class="comment">// re-throw</span></span><br><span class="line">                        <span class="keyword">throw</span> ioe;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Successful accept, reset the error delay</span></span><br><span class="line">                errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Configure the socket</span></span><br><span class="line">                <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">                    <span class="comment">// setSocketOptions() will hand the socket off to</span></span><br><span class="line">                    <span class="comment">// an appropriate processor if successful</span></span><br><span class="line">                    <span class="comment">// 放到队列里,所以accept只是用来做接收请求的功能</span></span><br><span class="line">                    <span class="keyword">if</span> (!setSocketOptions(socket)) &#123;</span><br><span class="line">                        closeSocket(socket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    closeSocket(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(<span class="string">"endpoint.accept.fail"</span>), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state = AcceptorState.ENDED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.tomcat.util.net.NioEndpoint#setSocketOptions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setSocketOptions</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Process the connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//disable blocking, APR style, we are gonna be polling it</span></span><br><span class="line">            socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            Socket sock = socket.socket();</span><br><span class="line">            socketProperties.setProperties(sock);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造对象</span></span><br><span class="line">            NioChannel channel = nioChannels.pop();</span><br><span class="line">            <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                SocketBufferHandler bufhandler = <span class="keyword">new</span> SocketBufferHandler(</span><br><span class="line">                        socketProperties.getAppReadBufSize(),</span><br><span class="line">                        socketProperties.getAppWriteBufSize(),</span><br><span class="line">                        socketProperties.getDirectBuffer());</span><br><span class="line">                <span class="keyword">if</span> (isSSLEnabled()) &#123;</span><br><span class="line">                    channel = <span class="keyword">new</span> SecureNioChannel(socket, bufhandler, selectorPool, <span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    channel = <span class="keyword">new</span> NioChannel(socket, bufhandler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channel.setIOChannel(socket);</span><br><span class="line">                channel.reset();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建的对象放到队列里</span></span><br><span class="line">            getPoller0().register(channel);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.error(<span class="string">""</span>,t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tt) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(tt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Tell to close the socket</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.tomcat.util.net.NioEndpoint.Poller#register</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> NioChannel socket)</span> </span>&#123;</span><br><span class="line">    socket.setPoller(<span class="keyword">this</span>);</span><br><span class="line">    NioSocketWrapper ka = <span class="keyword">new</span> NioSocketWrapper(socket, NioEndpoint.<span class="keyword">this</span>);</span><br><span class="line">    socket.setSocketWrapper(ka);</span><br><span class="line">    ka.setPoller(<span class="keyword">this</span>);</span><br><span class="line">    ka.setReadTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line">    ka.setWriteTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line">    ka.setKeepAliveLeft(NioEndpoint.<span class="keyword">this</span>.getMaxKeepAliveRequests());</span><br><span class="line">    ka.setSecure(isSSLEnabled());</span><br><span class="line">    ka.setReadTimeout(getConnectionTimeout());</span><br><span class="line">    ka.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">    PollerEvent r = eventCache.pop();</span><br><span class="line">    ka.interestOps(SelectionKey.OP_READ);<span class="comment">//this is what OP_REGISTER turns into.</span></span><br><span class="line">    <span class="keyword">if</span> ( r==<span class="keyword">null</span>) r = <span class="keyword">new</span> PollerEvent(socket,ka,OP_REGISTER);</span><br><span class="line">    <span class="keyword">else</span> r.reset(socket,ka,OP_REGISTER);</span><br><span class="line">    <span class="comment">// 加入到队列中</span></span><br><span class="line">    addEvent(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SynchronizedQueue&lt;PollerEvent&gt; events =<span class="keyword">new</span> SynchronizedQueue&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>这里涉及到NIO编程,也要去学习下</p>
<p>org.apache.tomcat.util.net.NioEndpoint.Poller#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Loop until destroy() is called</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略代码</span></span><br><span class="line">        <span class="comment">// 走到这里</span></span><br><span class="line">        processKey(sk, attachment);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processKey</span><span class="params">(SelectionKey sk, NioSocketWrapper attachment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( close ) &#123;</span><br><span class="line">            cancelledKey(sk);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( sk.isValid() &amp;&amp; attachment != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sk.isReadable() || sk.isWritable() ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( attachment.getSendfileData() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                    processSendfile(sk,attachment, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    unreg(sk, attachment, sk.readyOps());</span><br><span class="line">                    <span class="keyword">boolean</span> closeSocket = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">// Read goes before write</span></span><br><span class="line">                    <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">// 这里</span></span><br><span class="line">                        <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_READ, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                            closeSocket = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!closeSocket &amp;&amp; sk.isWritable()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_WRITE, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                            closeSocket = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (closeSocket) &#123;</span><br><span class="line">                        cancelledKey(sk);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//invalid key</span></span><br><span class="line">            cancelledKey(sk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( CancelledKeyException ckx ) &#123;</span><br><span class="line">        cancelledKey(sk);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        log.error(<span class="string">""</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.tomcat.util.net.AbstractEndpoint#processSocket</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processSocket</span><span class="params">(SocketWrapperBase&lt;S&gt; socketWrapper,</span></span></span><br><span class="line"><span class="function"><span class="params">            SocketEvent event, <span class="keyword">boolean</span> dispatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socketWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SocketProcessorBase&lt;S&gt; sc = processorCache.pop();</span><br><span class="line">            <span class="keyword">if</span> (sc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sc = createSocketProcessor(socketWrapper, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.reset(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            Executor executor = getExecutor();</span><br><span class="line">            <span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 给线程池运行,调用SocketProcessorBase的run方法</span></span><br><span class="line">                executor.execute(sc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RejectedExecutionException ree) &#123;</span><br><span class="line">            getLog().warn(sm.getString(<span class="string">"endpoint.executor.fail"</span>, socketWrapper) , ree);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            <span class="comment">// This means we got an OOM or similar creating a thread, or that</span></span><br><span class="line">            <span class="comment">// the pool and its queue are full</span></span><br><span class="line">            getLog().error(sm.getString(<span class="string">"endpoint.process.fail"</span>), t);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.tomcat.util.net.SocketProcessorBase#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (socketWrapper) &#123;</span><br><span class="line">      	<span class="comment">// 省略代码</span></span><br><span class="line">        doRun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.tomcat.util.net.NioEndpoint.SocketProcessor#doRun</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NioChannel socket = socketWrapper.getSocket();</span><br><span class="line">    SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> handshake = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket.isHandshakeComplete()) &#123;</span><br><span class="line">                    <span class="comment">// No TLS handshaking required. Let the handler</span></span><br><span class="line">                    <span class="comment">// process this socket / event combination.</span></span><br><span class="line">                    handshake = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == SocketEvent.STOP || event == SocketEvent.DISCONNECT ||</span><br><span class="line">                           event == SocketEvent.ERROR) &#123;</span><br><span class="line">                    <span class="comment">// Unable to complete the TLS handshake. Treat it as</span></span><br><span class="line">                    <span class="comment">// if the handshake failed.</span></span><br><span class="line">                    handshake = -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    handshake = socket.handshake(key.isReadable(), key.isWritable());</span><br><span class="line">                    <span class="comment">// The handshake process reads/writes from/to the</span></span><br><span class="line">                    <span class="comment">// socket. status may therefore be OPEN_WRITE once</span></span><br><span class="line">                    <span class="comment">// the handshake completes. However, the handshake</span></span><br><span class="line">                    <span class="comment">// happens when the socket is opened so the status</span></span><br><span class="line">                    <span class="comment">// must always be OPEN_READ after it completes. It</span></span><br><span class="line">                    <span class="comment">// is OK to always set this as it is only used if</span></span><br><span class="line">                    <span class="comment">// the handshake completes.</span></span><br><span class="line">                    event = SocketEvent.OPEN_READ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            handshake = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) log.debug(<span class="string">"Error during SSL handshake"</span>,x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CancelledKeyException ckx) &#123;</span><br><span class="line">            handshake = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handshake == <span class="number">0</span>) &#123;</span><br><span class="line">            SocketState state = SocketState.OPEN;</span><br><span class="line">            <span class="comment">// Process the request from this socket</span></span><br><span class="line">            <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">                state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 调用这里</span></span><br><span class="line">                state = getHandler().process(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state == SocketState.CLOSED) &#123;</span><br><span class="line">                close(socket, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handshake == -<span class="number">1</span> ) &#123;</span><br><span class="line">            close(socket, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handshake == SelectionKey.OP_READ)&#123;</span><br><span class="line">            socketWrapper.registerReadInterest();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handshake == SelectionKey.OP_WRITE)&#123;</span><br><span class="line">            socketWrapper.registerWriteInterest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancelledKeyException cx) &#123;</span><br><span class="line">        socket.getPoller().cancelledKey(key);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (VirtualMachineError vme) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(vme);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        log.error(<span class="string">""</span>, t);</span><br><span class="line">        socket.getPoller().cancelledKey(key);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        socketWrapper = <span class="keyword">null</span>;</span><br><span class="line">        event = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//return to cache</span></span><br><span class="line">        <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">            processorCache.push(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.coyote.AbstractProtocol.ConnectionHandler#process</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocketState <span class="title">process</span><span class="params">(SocketWrapperBase&lt;S&gt; wrapper, SocketEvent status)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 省略代码</span></span><br><span class="line">    state = processor.process(wrapper, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.coyote.AbstractProcessorLight#process</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocketState <span class="title">process</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    SocketState state = SocketState.CLOSED;</span><br><span class="line">    Iterator&lt;DispatchType&gt; dispatches = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dispatches != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DispatchType nextDispatch = dispatches.next();</span><br><span class="line">            state = dispatch(nextDispatch.getSocketStatus());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == SocketEvent.DISCONNECT) &#123;</span><br><span class="line">            <span class="comment">// Do nothing here, just wait for it to get recycled</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAsync() || isUpgrade() || state == SocketState.ASYNC_END) &#123;</span><br><span class="line">            state = dispatch(status);</span><br><span class="line">            <span class="keyword">if</span> (state == SocketState.OPEN) &#123;</span><br><span class="line">                <span class="comment">// There may be pipe-lined data to read. If the data isn't</span></span><br><span class="line">                <span class="comment">// processed now, execution will exit this loop and call</span></span><br><span class="line">                <span class="comment">// release() which will recycle the processor (and input</span></span><br><span class="line">                <span class="comment">// buffer) deleting any pipe-lined data. To avoid this,</span></span><br><span class="line">                <span class="comment">// process it now.</span></span><br><span class="line">                <span class="comment">// 调用servie</span></span><br><span class="line">                state = service(socketWrapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">            <span class="comment">// Extra write event likely after async, ignore</span></span><br><span class="line">            state = SocketState.LONG;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == SocketEvent.OPEN_READ)&#123;</span><br><span class="line">            state = service(socketWrapper);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Default to closing the socket if the SocketEvent passed in</span></span><br><span class="line">            <span class="comment">// is not consistent with the current state of the Processor</span></span><br><span class="line">            state = SocketState.CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">            getLog().debug(<span class="string">"Socket: ["</span> + socketWrapper +</span><br><span class="line">                           <span class="string">"], Status in: ["</span> + status +</span><br><span class="line">                           <span class="string">"], State out: ["</span> + state + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state != SocketState.CLOSED &amp;&amp; isAsync()) &#123;</span><br><span class="line">            state = asyncPostProcess();</span><br><span class="line">            <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                getLog().debug(<span class="string">"Socket: ["</span> + socketWrapper +</span><br><span class="line">                               <span class="string">"], State after async post processing: ["</span> + state + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dispatches == <span class="keyword">null</span> || !dispatches.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// Only returns non-null iterator if there are</span></span><br><span class="line">            <span class="comment">// dispatches to process.</span></span><br><span class="line">            dispatches = getIteratorAndClearDispatches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (state == SocketState.ASYNC_END ||</span><br><span class="line">             dispatches != <span class="keyword">null</span> &amp;&amp; state != SocketState.CLOSED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.coyote.http11.Http11Processor#service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocketState <span class="title">service</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 省略很多很多代码</span></span><br><span class="line">    <span class="comment">// 调用适配器的service</span></span><br><span class="line">	getAdapter().service(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.connector.CoyoteAdapter#service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Calling the container</span></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">    <span class="comment">// 适配器已经转好了协议</span></span><br><span class="line">    <span class="comment">// 从这里开始,就开始调用容器里的各个层级的责任链了</span></span><br><span class="line">    <span class="comment">// 这里调用的Engine的责任链</span></span><br><span class="line">    connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.core.StandardEngineValve#invoke</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Select the Host to be used for this Request</span></span><br><span class="line">    Host host = request.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>) &#123;</span><br><span class="line">        response.sendError</span><br><span class="line">            (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class="line">             sm.getString(<span class="string">"standardEngine.noHost"</span>,</span><br><span class="line">                          request.getServerName()));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ask this Host to process this request</span></span><br><span class="line">    host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.core.StandardHostValve#invoke</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 省略代码</span></span><br><span class="line">        context.bind(Globals.IS_SECURITY_ENABLED, MY_CLASSLOADER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ask this Context to process this request. Requests that are</span></span><br><span class="line">        <span class="comment">// already in error must have been routed here to check for</span></span><br><span class="line">        <span class="comment">// application defined error pages so DO NOT forward them to the the</span></span><br><span class="line">        <span class="comment">// application for processing.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!response.isErrorReportRequired()) &#123;</span><br><span class="line">                <span class="comment">// 调用Context责任链</span></span><br><span class="line">                context.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.core.StandardContextValve#invoke</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 省略代码</span></span></span><br><span class="line"><span class="function">    wrapper.<span class="title">getPipeline</span><span class="params">()</span>.<span class="title">getFirst</span><span class="params">()</span>.<span class="title">invoke</span><span class="params">(request, response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.core.StandardWrapperValve#invoke</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize local variables we may need</span></span><br><span class="line">    <span class="keyword">boolean</span> unavailable = <span class="keyword">false</span>;</span><br><span class="line">    Throwable throwable = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// This should be a Request attribute...</span></span><br><span class="line">    <span class="keyword">long</span> t1=System.currentTimeMillis();</span><br><span class="line">    requestCount.incrementAndGet();</span><br><span class="line">    StandardWrapper wrapper = (StandardWrapper) getContainer();</span><br><span class="line">    <span class="comment">// 终于看到Servlet了</span></span><br><span class="line">    Servlet servlet = <span class="keyword">null</span>;</span><br><span class="line">    Context context = (Context) wrapper.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for the application being marked unavailable</span></span><br><span class="line">    <span class="keyword">if</span> (!context.getState().isAvailable()) &#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                           sm.getString(<span class="string">"standardContext.isUnavailable"</span>));</span><br><span class="line">        unavailable = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for the servlet being marked unavailable</span></span><br><span class="line">    <span class="keyword">if</span> (!unavailable &amp;&amp; wrapper.isUnavailable()) &#123;</span><br><span class="line">        container.getLogger().info(sm.getString(<span class="string">"standardWrapper.isUnavailable"</span>,</span><br><span class="line">                                                wrapper.getName()));</span><br><span class="line">        <span class="keyword">long</span> available = wrapper.getAvailable();</span><br><span class="line">        <span class="keyword">if</span> ((available &gt; <span class="number">0L</span>) &amp;&amp; (available &lt; Long.MAX_VALUE)) &#123;</span><br><span class="line">            response.setDateHeader(<span class="string">"Retry-After"</span>, available);</span><br><span class="line">            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,</span><br><span class="line">                               sm.getString(<span class="string">"standardWrapper.isUnavailable"</span>,</span><br><span class="line">                                            wrapper.getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (available == Long.MAX_VALUE) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND,</span><br><span class="line">                               sm.getString(<span class="string">"standardWrapper.notFound"</span>,</span><br><span class="line">                                            wrapper.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        unavailable = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate a servlet instance to process this request</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!unavailable) &#123;</span><br><span class="line">            <span class="comment">// 把当前请求的Servlet赋值</span></span><br><span class="line">            servlet = wrapper.allocate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// Create the filter chain for this request</span></span><br><span class="line">    <span class="comment">// 创建过滤器责任链</span></span><br><span class="line">    ApplicationFilterChain filterChain =</span><br><span class="line">        ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 调用责任链</span></span><br><span class="line">    filterChain.doFilter(request.getRequest(),response.getResponse());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.core.ApplicationFilterChain#doFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 省略代码</span></span><br><span class="line">        internalDoFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.core.ApplicationFilterChain#internalDoFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">internalDoFilter</span><span class="params">(ServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the next filter if there is one</span></span><br><span class="line">    	<span class="comment">// 开始循环调用过滤器</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            ApplicationFilterConfig filterConfig = filters[pos++];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Filter filter = filterConfig.getFilter();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="string">"false"</span>.equalsIgnoreCase(</span><br><span class="line">                        filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                    <span class="keyword">final</span> ServletRequest req = request;</span><br><span class="line">                    <span class="keyword">final</span> ServletResponse res = response;</span><br><span class="line">                    Principal principal =</span><br><span class="line">                        ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"></span><br><span class="line">                    Object[] args = <span class="keyword">new</span> Object[]&#123;req, res, <span class="keyword">this</span>&#125;;</span><br><span class="line">                    SecurityUtil.doAsPrivilege (<span class="string">"doFilter"</span>, filter, classType, args, principal);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 执行过滤器</span></span><br><span class="line">                    filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">                ExceptionUtils.handleThrowable(e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(sm.getString(<span class="string">"filterChain.filter"</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We fell off the end of the chain -- call the servlet instance</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">                lastServicedRequest.set(request);</span><br><span class="line">                lastServicedResponse.set(response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; !servletSupportsAsync) &#123;</span><br><span class="line">                request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,</span><br><span class="line">                        Boolean.FALSE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Use potentially wrapped request from this point</span></span><br><span class="line">            <span class="keyword">if</span> ((request <span class="keyword">instanceof</span> HttpServletRequest) &amp;&amp;</span><br><span class="line">                    (response <span class="keyword">instanceof</span> HttpServletResponse) &amp;&amp;</span><br><span class="line">                    Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                <span class="keyword">final</span> ServletRequest req = request;</span><br><span class="line">                <span class="keyword">final</span> ServletResponse res = response;</span><br><span class="line">                Principal principal =</span><br><span class="line">                    ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line">                Object[] args = <span class="keyword">new</span> Object[]&#123;req, res&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege(<span class="string">"service"</span>,</span><br><span class="line">                                           servlet,</span><br><span class="line">                                           classTypeUsedInService,</span><br><span class="line">                                           args,</span><br><span class="line">                                           principal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 执行完过滤器,就开始要调用HttpServlet的方法</span></span><br><span class="line">                servlet.service(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">            ExceptionUtils.handleThrowable(e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(sm.getString(<span class="string">"filterChain.servlet"</span>), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">                lastServicedRequest.set(<span class="keyword">null</span>);</span><br><span class="line">                lastServicedResponse.set(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpServletRequest  request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        request = (HttpServletRequest) req;</span><br><span class="line">        response = (HttpServletResponse) res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    service(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// servlet doesn't support if-modified-since, no reason</span></span><br><span class="line">            <span class="comment">// to go through further expensive logic</span></span><br><span class="line">            <span class="comment">// 这里就开始调用我们自己写的Servlet的方法了</span></span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">        maybeSetLastModified(resp, lastModified);</span><br><span class="line">        doHead(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">        doPut(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">        doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">        doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">        doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">        <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">        errArgs[<span class="number">0</span>] = method;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>自己写的Setvlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BBSServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====================get==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====================post==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个流程看着还有不太多的,就是在Accept接收到了请求,是怎么调用processKey这里卡住了</p>
<p>没有找到代码,各种打断点,而且都NioEndpoint的内部类,又看晕了,还有责任链,顺便也简单的学了责任链设计模式</p>
<p>请求流程还涉及到了NIO编程,这个就有点麻烦了,还没仔细学,硬着头皮先过了,之后学完了,再写NIO编程的文章</p>
<p>参考的文章:<br><a href="http://kael-aiur.com/tomcat%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/tomcat%E8%AF%B7%E6%B1%82%E6%8E%A5%E6%94%B6%E5%A4%84%E7%90%86.html" target="_blank" rel="noopener">http://kael-aiur.com/tomcat%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/tomcat%E8%AF%B7%E6%B1%82%E6%8E%A5%E6%94%B6%E5%A4%84%E7%90%86.html</a></p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
</search>
